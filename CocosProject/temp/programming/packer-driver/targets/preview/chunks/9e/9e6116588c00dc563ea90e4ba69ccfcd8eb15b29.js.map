{"version":3,"sources":["file:///Users/clare/Desktop/%E5%89%8D%E5%93%A8AI%E5%B0%8F%E8%AF%BE/ClareProject/Cute-Pet-Escape-Project/CocosProject/assets/scripts/network/RemotePlayerController.ts"],"names":["_decorator","Component","Vec3","Quat","ccclass","property","RemotePlayerController","_sessionId","_playerName","_targetPosition","_targetRotationY","_targetAnimationState","_targetIsMoving","_currentPosition","_currentRotationY","_tempVec3","_tempQuat","_animationController","start","node","getPosition","eulerAngles","y","set","getComponentInChildren","console","log","update","deltaTime","enableSmoothing","interpolatePosition","interpolateRotation","distance","snapThreshold","setPosition","showDebugInfo","toFixed","lerp","interpolationSpeed","currentRotationY","angleDiff","getShortestAngleDifference","Math","abs","newRotationY","setRotationFromEuler","from","to","diff","initialize","sessionId","playerData","name","updatePlayerState","immediate","x","z","rotationY","animationState","isMoving","updateAnimation","playRun","playIdle","getSessionId","getPlayerName","setInterpolationSpeed","speed","max","setSmoothing","enabled"],"mappings":"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","sourcesContent":["// 文件名: RemotePlayerController.ts\n// 功能: 远程玩家控制器 - 接收并应用远程玩家数据（任务4.1）\n\nimport { _decorator, Component, Node, Vec3, Quat, tween } from 'cc';\nimport { PlayerData } from './NetworkManager';\nconst { ccclass, property } = _decorator;\n\n@ccclass('RemotePlayerController')\nexport class RemotePlayerController extends Component {\n    // ============ 配置 ============\n    @property\n    public interpolationSpeed: number = 10.0; // 插值速度（越大越快，建议5-20）\n\n    @property\n    public snapThreshold: number = 5.0; // 距离阈值（米），超过此距离直接传送\n\n    @property\n    public enableSmoothing: boolean = true; // 是否启用平滑插值\n\n    @property\n    public showDebugInfo: boolean = false; // 是否显示调试信息\n\n    // 玩家信息\n    private _sessionId: string = \"\";\n    private _playerName: string = \"\";\n\n    // 目标状态（从服务器接收）\n    private _targetPosition: Vec3 = new Vec3();\n    private _targetRotationY: number = 0;\n    private _targetAnimationState: string = \"idle\";\n    private _targetIsMoving: boolean = false;\n\n    // 当前状态（实际显示）\n    private _currentPosition: Vec3 = new Vec3();\n    private _currentRotationY: number = 0;\n\n    // 临时变量（性能优化）\n    private _tempVec3: Vec3 = new Vec3();\n    private _tempQuat: Quat = new Quat();\n\n    // 动画控制器引用（如果有）\n    private _animationController: any = null;\n\n    start() {\n        // 获取初始位置\n        this.node.getPosition(this._currentPosition);\n        this._currentRotationY = this.node.eulerAngles.y;\n\n        this._targetPosition.set(this._currentPosition);\n        this._targetRotationY = this._currentRotationY;\n\n        // 尝试获取动画控制器\n        this._animationController = this.node.getComponentInChildren('CharacterAnimationController');\n        if (this._animationController) {\n            console.log(`[RemotePlayerController] 找到动画控制器`);\n        }\n    }\n\n    update(deltaTime: number) {\n        if (!this.enableSmoothing) return;\n\n        // 插值移动到目标位置\n        this.interpolatePosition(deltaTime);\n\n        // 插值旋转到目标角度\n        this.interpolateRotation(deltaTime);\n    }\n\n    /**\n     * 位置插值\n     */\n    private interpolatePosition(deltaTime: number) {\n        this.node.getPosition(this._currentPosition);\n\n        // 计算距离\n        const distance = Vec3.distance(this._currentPosition, this._targetPosition);\n\n        // 如果距离过大，直接传送（防止延迟导致的巨大偏移）\n        if (distance > this.snapThreshold) {\n            this.node.setPosition(this._targetPosition);\n            this._currentPosition.set(this._targetPosition);\n            if (this.showDebugInfo) {\n                console.log(`[RemotePlayerController] 传送到目标位置（距离${distance.toFixed(2)}米）`);\n            }\n            return;\n        }\n\n        // 平滑插值\n        if (distance > 0.01) {\n            Vec3.lerp(this._tempVec3, this._currentPosition, this._targetPosition, this.interpolationSpeed * deltaTime);\n            this.node.setPosition(this._tempVec3);\n        }\n    }\n\n    /**\n     * 旋转插值\n     */\n    private interpolateRotation(deltaTime: number) {\n        const currentRotationY = this.node.eulerAngles.y;\n        const angleDiff = this.getShortestAngleDifference(currentRotationY, this._targetRotationY);\n\n        // 如果角度差距很小，直接设置\n        if (Math.abs(angleDiff) < 1.0) {\n            return;\n        }\n\n        // 平滑插值\n        const newRotationY = currentRotationY + angleDiff * this.interpolationSpeed * deltaTime;\n        this.node.setRotationFromEuler(0, newRotationY, 0);\n        this._currentRotationY = newRotationY;\n    }\n\n    /**\n     * 获取最短角度差（-180到180度）\n     */\n    private getShortestAngleDifference(from: number, to: number): number {\n        let diff = to - from;\n        while (diff > 180) diff -= 360;\n        while (diff < -180) diff += 360;\n        return diff;\n    }\n\n    // ============ 公共接口 ============\n\n    /**\n     * 初始化远程玩家\n     */\n    public initialize(sessionId: string, playerData: PlayerData) {\n        this._sessionId = sessionId;\n        this._playerName = playerData.name;\n\n        console.log(`[RemotePlayerController] 初始化远程玩家: ${this._playerName} (${sessionId})`);\n\n        // 设置初始位置\n        this.updatePlayerState(playerData, true);\n    }\n\n    /**\n     * 更新玩家状态\n     */\n    public updatePlayerState(playerData: PlayerData, immediate: boolean = false) {\n        // 更新目标状态\n        this._targetPosition.set(playerData.x, playerData.y, playerData.z);\n        this._targetRotationY = playerData.rotationY;\n        this._targetAnimationState = playerData.animationState;\n        this._targetIsMoving = playerData.isMoving;\n\n        // 如果需要立即应用（初始化或传送）\n        if (immediate || !this.enableSmoothing) {\n            this.node.setPosition(this._targetPosition);\n            this.node.setRotationFromEuler(0, this._targetRotationY, 0);\n            this._currentPosition.set(this._targetPosition);\n            this._currentRotationY = this._targetRotationY;\n        }\n\n        // 更新动画状态\n        this.updateAnimation();\n\n        if (this.showDebugInfo) {\n            console.log(`[RemotePlayerController] 更新状态: ${this._playerName}, pos(${playerData.x.toFixed(2)}, ${playerData.z.toFixed(2)}), moving(${playerData.isMoving})`);\n        }\n    }\n\n    /**\n     * 更新动画状态\n     */\n    private updateAnimation() {\n        if (!this._animationController) return;\n\n        // 根据移动状态播放动画\n        if (this._targetIsMoving) {\n            if (typeof this._animationController.playRun === 'function') {\n                this._animationController.playRun();\n            }\n        } else {\n            if (typeof this._animationController.playIdle === 'function') {\n                this._animationController.playIdle();\n            }\n        }\n    }\n\n    /**\n     * 获取会话ID\n     */\n    public getSessionId(): string {\n        return this._sessionId;\n    }\n\n    /**\n     * 获取玩家名称\n     */\n    public getPlayerName(): string {\n        return this._playerName;\n    }\n\n    /**\n     * 设置插值速度\n     */\n    public setInterpolationSpeed(speed: number) {\n        this.interpolationSpeed = Math.max(1.0, speed);\n    }\n\n    /**\n     * 启用/禁用平滑插值\n     */\n    public setSmoothing(enabled: boolean) {\n        this.enableSmoothing = enabled;\n    }\n}\n"]}