{"version":3,"sources":["file:///Users/clare/Desktop/%E5%89%8D%E5%93%A8AI%E5%B0%8F%E8%AF%BE/ClareProject/Cute-Pet-Escape-Project/CocosProject/assets/scripts/CharacterState.ts"],"names":["_decorator","Component","ccclass","property","CharacterStateType","CharacterState","_currentState","NORMAL","_hangCount","_hangTimer","_isHangTimerActive","_stateChangeCallbacks","_caughtBy","_beingRescuedBy","_rescueProgress","_isBeingRescued","start","console","log","node","name","update","deltaTime","HANGED","eliminate","rescueDuration","onRescueComplete","getCurrentState","setCaught","hunter","warn","oldState","CAUGHT","notifyStateChange","setHanged","maxHangCount","hangDuration","startRescue","rescuer","cancelRescue","toFixed","rescuerController","getComponent","setMovementLocked","setParent","scene","currentPos","worldPosition","setWorldPosition","x","z","ELIMINATED","active","setNormal","isNormal","isCaught","isHanged","isEliminated","isBeingRescued","getRescueProgress","getHangTimeRemaining","getHangCount","getRemainingLives","Math","max","canBeRescued","onStateChange","callback","push","newState","reset","getStateInfo"],"mappings":"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","sourcesContent":["// 文件名: CharacterState.ts\n// 功能：角色状态管理（任务2.1）\n// 负责管理逃生者的状态：正常、被抓、被挂起、被淘汰\n\nimport { _decorator, Component, Node } from 'cc';\nconst { ccclass, property } = _decorator;\n\n/**\n * 角色状态枚举\n */\nexport enum CharacterStateType {\n    NORMAL = 'normal',          // 正常状态，可以自由移动\n    CAUGHT = 'caught',          // 被抓状态，被追捕者抓住\n    HANGED = 'hanged',          // 被挂起状态，在笼子上\n    ELIMINATED = 'eliminated'   // 被淘汰状态，退出游戏\n}\n\n/**\n * 状态变化事件回调类型\n */\nexport type StateChangeCallback = (oldState: CharacterStateType, newState: CharacterStateType) => void;\n\n@ccclass('CharacterState')\nexport class CharacterState extends Component {\n    @property\n    public maxHangCount: number = 2; // 最多被挂起次数（2条命）\n\n    @property\n    public hangDuration: number = 30.0; // 挂起倒计时（秒）\n\n    @property\n    public rescueDuration: number = 3.0; // 救援读条时长（秒）\n\n    private _currentState: CharacterStateType = CharacterStateType.NORMAL;\n    private _hangCount: number = 0; // 已被挂起次数\n    private _hangTimer: number = 0; // 挂起倒计时计时器\n    private _isHangTimerActive: boolean = false; // 倒计时是否激活\n\n    // 状态变化回调\n    private _stateChangeCallbacks: StateChangeCallback[] = [];\n\n    // 被谁抓住（追捕者节点引用）\n    private _caughtBy: Node | null = null;\n\n    // 正在被谁救援（队友节点引用）\n    private _beingRescuedBy: Node | null = null;\n    private _rescueProgress: number = 0; // 救援进度 0-1\n    private _isBeingRescued: boolean = false;\n\n    start() {\n        this._currentState = CharacterStateType.NORMAL;\n        console.log(`[CharacterState] ${this.node.name} 初始状态：${this._currentState}`);\n    }\n\n    update(deltaTime: number) {\n        // 处理挂起倒计时\n        if (this._isHangTimerActive && this._currentState === CharacterStateType.HANGED) {\n            this._hangTimer -= deltaTime;\n\n            if (this._hangTimer <= 0) {\n                // 倒计时结束，淘汰\n                console.log(`[CharacterState] ${this.node.name} 挂起倒计时结束，淘汰`);\n                this.eliminate();\n            }\n        }\n\n        // 处理救援进度\n        if (this._isBeingRescued && this._currentState === CharacterStateType.HANGED) {\n            this._rescueProgress += deltaTime / this.rescueDuration;\n\n            if (this._rescueProgress >= 1.0) {\n                // 救援成功\n                this.onRescueComplete();\n            }\n        }\n    }\n\n    // ============ 状态控制 ============\n\n    /**\n     * 获取当前状态\n     */\n    public getCurrentState(): CharacterStateType {\n        return this._currentState;\n    }\n\n    /**\n     * 设置被抓状态\n     * @param hunter 追捕者节点\n     */\n    public setCaught(hunter: Node) {\n        if (this._currentState !== CharacterStateType.NORMAL) {\n            console.warn(`[CharacterState] ${this.node.name} 不是正常状态，无法被抓`);\n            return;\n        }\n\n        const oldState = this._currentState;\n        this._currentState = CharacterStateType.CAUGHT;\n        this._caughtBy = hunter;\n\n        console.log(`[CharacterState] ${this.node.name} 被 ${hunter.name} 抓住`);\n        this.notifyStateChange(oldState, this._currentState);\n    }\n\n    /**\n     * 设置被挂起状态\n     */\n    public setHanged() {\n        if (this._currentState !== CharacterStateType.CAUGHT) {\n            console.warn(`[CharacterState] ${this.node.name} 不是被抓状态，无法被挂起`);\n            return;\n        }\n\n        this._hangCount++;\n        this._caughtBy = null;\n\n        // ✅ 检查是否超过最大挂起次数\n        if (this._hangCount > this.maxHangCount) {\n            console.log(`[CharacterState] ${this.node.name} 挂起次数超限（${this._hangCount}/${this.maxHangCount}），立即淘汰`);\n            this.eliminate();\n            return;\n        }\n\n        const oldState = this._currentState;\n        this._currentState = CharacterStateType.HANGED;\n\n        // 启动挂起倒计时\n        this._hangTimer = this.hangDuration;\n        this._isHangTimerActive = true;\n\n        console.log(`[CharacterState] ${this.node.name} 被挂起（第${this._hangCount}次/${this.maxHangCount}次），倒计时${this.hangDuration}秒`);\n        this.notifyStateChange(oldState, this._currentState);\n    }\n\n    /**\n     * 开始救援\n     * @param rescuer 救援者节点\n     */\n    public startRescue(rescuer: Node): boolean {\n        if (this._currentState !== CharacterStateType.HANGED) {\n            console.warn(`[CharacterState] ${this.node.name} 不是被挂起状态，无法救援`);\n            return false;\n        }\n\n        if (this._isBeingRescued) {\n            console.warn(`[CharacterState] ${this.node.name} 已经在被救援中`);\n            return false;\n        }\n\n        this._isBeingRescued = true;\n        this._beingRescuedBy = rescuer;\n        this._rescueProgress = 0;\n\n        console.log(`[CharacterState] ${rescuer.name} 开始救援 ${this.node.name}`);\n        return true;\n    }\n\n    /**\n     * 中断救援\n     */\n    public cancelRescue() {\n        if (!this._isBeingRescued) return;\n\n        console.log(`[CharacterState] ${this.node.name} 的救援被中断（进度${(this._rescueProgress * 100).toFixed(0)}%）`);\n\n        this._isBeingRescued = false;\n        this._beingRescuedBy = null;\n        this._rescueProgress = 0;\n    }\n\n    /**\n     * 救援完成\n     */\n    private onRescueComplete() {\n        if (!this._isBeingRescued) return;\n\n        const rescuer = this._beingRescuedBy;\n        console.log(`[CharacterState] ${rescuer?.name} 成功救援 ${this.node.name}`);\n\n        const oldState = this._currentState;\n        this._currentState = CharacterStateType.NORMAL;\n        this._isHangTimerActive = false;\n        this._isBeingRescued = false;\n        this._beingRescuedBy = null;\n        this._rescueProgress = 0;\n\n        // 解锁救援者的移动\n        if (rescuer) {\n            const rescuerController = rescuer.getComponent('PlayerController');\n            if (rescuerController && typeof rescuerController.setMovementLocked === 'function') {\n                rescuerController.setMovementLocked(false);\n            }\n        }\n\n        // 将被救的逃生者从笼子上移回场景\n        this.node.setParent(this.node.scene);\n        const currentPos = this.node.worldPosition;\n        this.node.setWorldPosition(currentPos.x, 0, currentPos.z); // 放回地面\n\n        this.notifyStateChange(oldState, this._currentState);\n    }\n\n    /**\n     * 淘汰\n     */\n    public eliminate() {\n        const oldState = this._currentState;\n        this._currentState = CharacterStateType.ELIMINATED;\n        this._isHangTimerActive = false;\n        this._isBeingRescued = false;\n\n        console.log(`[CharacterState] ${this.node.name} 被淘汰`);\n        this.notifyStateChange(oldState, this._currentState);\n\n        // 隐藏节点（不销毁，方便调试）\n        this.node.active = false;\n    }\n\n    /**\n     * 强制设置状态为正常（用于救援成功或重置）\n     */\n    public setNormal() {\n        if (this._currentState === CharacterStateType.ELIMINATED) {\n            console.warn(`[CharacterState] ${this.node.name} 已被淘汰，无法恢复正常状态`);\n            return;\n        }\n\n        const oldState = this._currentState;\n        this._currentState = CharacterStateType.NORMAL;\n        this._caughtBy = null;\n        this._isHangTimerActive = false;\n        this._isBeingRescued = false;\n        this._beingRescuedBy = null;\n        this._rescueProgress = 0;\n\n        this.notifyStateChange(oldState, this._currentState);\n    }\n\n    // ============ 状态查询 ============\n\n    /**\n     * 是否正常状态\n     */\n    public isNormal(): boolean {\n        return this._currentState === CharacterStateType.NORMAL;\n    }\n\n    /**\n     * 是否被抓状态\n     */\n    public isCaught(): boolean {\n        return this._currentState === CharacterStateType.CAUGHT;\n    }\n\n    /**\n     * 是否被挂起状态\n     */\n    public isHanged(): boolean {\n        return this._currentState === CharacterStateType.HANGED;\n    }\n\n    /**\n     * 是否被淘汰状态\n     */\n    public isEliminated(): boolean {\n        return this._currentState === CharacterStateType.ELIMINATED;\n    }\n\n    /**\n     * 是否正在被救援\n     */\n    public isBeingRescued(): boolean {\n        return this._isBeingRescued;\n    }\n\n    /**\n     * 获取救援进度（0-1）\n     */\n    public getRescueProgress(): number {\n        return this._rescueProgress;\n    }\n\n    /**\n     * 获取挂起剩余时间\n     */\n    public getHangTimeRemaining(): number {\n        return this._hangTimer;\n    }\n\n    /**\n     * 获取已被挂起次数\n     */\n    public getHangCount(): number {\n        return this._hangCount;\n    }\n\n    /**\n     * 获取剩余生命（可被挂起次数）\n     */\n    public getRemainingLives(): number {\n        return Math.max(0, this.maxHangCount - this._hangCount);\n    }\n\n    /**\n     * 是否可以被救援\n     */\n    public canBeRescued(): boolean {\n        return this._currentState === CharacterStateType.HANGED && !this._isBeingRescued;\n    }\n\n    // ============ 回调系统 ============\n\n    /**\n     * 注册状态变化回调\n     */\n    public onStateChange(callback: StateChangeCallback) {\n        this._stateChangeCallbacks.push(callback);\n    }\n\n    /**\n     * 通知状态变化\n     */\n    private notifyStateChange(oldState: CharacterStateType, newState: CharacterStateType) {\n        for (const callback of this._stateChangeCallbacks) {\n            callback(oldState, newState);\n        }\n    }\n\n    // ============ 调试功能 ============\n\n    /**\n     * 重置状态（用于测试）\n     */\n    public reset() {\n        this._currentState = CharacterStateType.NORMAL;\n        this._hangCount = 0;\n        this._hangTimer = 0;\n        this._isHangTimerActive = false;\n        this._caughtBy = null;\n        this._isBeingRescued = false;\n        this._beingRescuedBy = null;\n        this._rescueProgress = 0;\n        this.node.active = true;\n\n        console.log(`[CharacterState] ${this.node.name} 状态已重置`);\n    }\n\n    /**\n     * 获取状态详情（调试用）\n     */\n    public getStateInfo(): string {\n        return `状态:${this._currentState}, 挂起次数:${this._hangCount}/${this.maxHangCount}, 剩余时间:${this._hangTimer.toFixed(1)}s, 救援进度:${(this._rescueProgress * 100).toFixed(0)}%`;\n    }\n}\n"]}