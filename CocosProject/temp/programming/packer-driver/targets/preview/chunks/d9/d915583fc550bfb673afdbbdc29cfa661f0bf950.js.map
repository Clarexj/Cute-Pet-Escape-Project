{"version":3,"sources":["file:///Users/clare/Desktop/%E5%89%8D%E5%93%A8AI%E5%B0%8F%E8%AF%BE/ClareProject/Cute-Pet-Escape-Project/CocosProject/assets/scripts/GameManager.ts"],"names":["_decorator","Component","Node","Prefab","instantiate","Vec3","CharacterState","CharacterStateType","ccclass","property","GameState","GameManager","_currentState","WAITING","_timeRemaining","_oreCollected","_survivorsEscaped","_survivorsEliminated","_exitZoneGenerated","_exitZoneNode","_allCharacters","_stateChangeCallbacks","_statsChangeCallbacks","onLoad","_instance","console","warn","node","destroy","start","log","gameDuration","refreshCharacters","registerCharacterListeners","autoStartGame","scheduleOnce","startGame","notifyStatsChange","update","deltaTime","PLAYING","Math","floor","onTimeUp","checkWinConditions","onDestroy","notifyStateChange","pauseGame","restartGame","character","reset","endGame","result","eliminationsToWin","HUNTER_WIN","survivorsToWin","SURVIVOR_WIN","DRAW","scene","getComponentsInChildren","length","onStateChange","oldState","newState","ELIMINATED","onSurvivorEliminated","onOreCollected","oreNode","oresRequiredForExit","generateExitZone","onSurvivorEscaped","survivorNode","exitZonePrefab","setParent","exitZoneSpawnPoint","setWorldPosition","getWorldPosition","setPosition","position","existingExitZone","findExitZoneInScene","active","allNodes","children","name","toLowerCase","includes","isExitZoneGenerated","getOresRequiredForExit","getCurrentState","getStats","oreCollected","survivorsEscaped","survivorsEliminated","timeRemaining","getTimeRemaining","getTimeRemainingFormatted","minutes","seconds","toString","padStart","isPlaying","isGameOver","callback","push","stats","onStatsChange","getInstance","setTimeRemaining","debugEscape","count","i","debugEliminate","getGameInfo"],"mappings":"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","sourcesContent":["// 文件名: GameManager.ts\n// 功能：游戏状态管理 + 倒计时 + 胜负判定（任务2.2）\n// 管理完整的游戏流程\n\nimport { _decorator, Component, Node, Prefab, instantiate, Vec3 } from 'cc';\nimport { CharacterState, CharacterStateType } from './CharacterState';\nimport { Ore } from './Ore';\nconst { ccclass, property } = _decorator;\n\n/**\n * 游戏状态枚举\n */\nexport enum GameState {\n    WAITING = 'waiting',        // 等待开始\n    PLAYING = 'playing',        // 游戏中\n    HUNTER_WIN = 'hunter_win',  // 追捕者胜利\n    SURVIVOR_WIN = 'survivor_win', // 逃生者胜利\n    DRAW = 'draw'               // 平局\n}\n\n/**\n * 游戏统计数据\n */\nexport interface GameStats {\n    oreCollected: number;      // 矿石拾取数量\n    survivorsEscaped: number;  // 逃脱人数\n    survivorsEliminated: number; // 淘汰人数\n    timeRemaining: number;     // 剩余时间（秒）\n}\n\n/**\n * 游戏状态变化回调类型\n */\nexport type GameStateCallback = (newState: GameState, stats: GameStats) => void;\n\n/**\n * 游戏统计变化回调类型\n */\nexport type GameStatsCallback = (stats: GameStats) => void;\n\n@ccclass('GameManager')\nexport class GameManager extends Component {\n    @property\n    public gameDuration: number = 300.0; // 游戏时长（秒），默认5分钟\n\n    @property\n    public survivorsToWin: number = 3; // 逃生者胜利所需逃脱人数\n\n    @property\n    public eliminationsToWin: number = 3; // 追捕者胜利所需淘汰人数\n\n    @property\n    public autoStartGame: boolean = false; // 是否自动开始游戏\n\n    @property\n    public oresRequiredForExit: number = 8; // 生成逃生门所需矿石数量\n\n    @property(Prefab)\n    public exitZonePrefab: Prefab | null = null; // 逃生门预制体（可选）\n\n    @property(Node)\n    public exitZoneSpawnPoint: Node | null = null; // 逃生门生成位置（可选）\n\n    // 游戏状态\n    private _currentState: GameState = GameState.WAITING;\n    private _timeRemaining: number = 0;\n\n    // 游戏统计\n    private _oreCollected: number = 0;\n    private _survivorsEscaped: number = 0;\n    private _survivorsEliminated: number = 0;\n\n    // 逃生门系统\n    private _exitZoneGenerated: boolean = false; // 逃生门是否已生成\n    private _exitZoneNode: Node | null = null; // 生成的逃生门节点\n\n    // 角色引用\n    private _allCharacters: CharacterState[] = [];\n\n    // 回调系统\n    private _stateChangeCallbacks: GameStateCallback[] = [];\n    private _statsChangeCallbacks: GameStatsCallback[] = [];\n\n    // 单例模式\n    private static _instance: GameManager | null = null;\n\n    onLoad() {\n        // 实现单例模式\n        if (GameManager._instance) {\n            console.warn('[GameManager] 已存在实例，销毁当前节点');\n            this.node.destroy();\n            return;\n        }\n        GameManager._instance = this;\n    }\n\n    start() {\n        console.log('[GameManager] 游戏管理器初始化');\n\n        // 初始化时间\n        this._timeRemaining = this.gameDuration;\n\n        // 缓存所有角色\n        this.refreshCharacters();\n\n        // 注册角色状态变化监听\n        this.registerCharacterListeners();\n\n        // 如果自动开始，启动游戏\n        if (this.autoStartGame) {\n            this.scheduleOnce(() => {\n                this.startGame();\n            }, 1.0); // 延迟1秒启动，确保所有组件初始化完成\n        }\n\n        // 通知初始统计\n        this.notifyStatsChange();\n    }\n\n    update(deltaTime: number) {\n        // 只有游戏进行中才倒计时\n        if (this._currentState !== GameState.PLAYING) return;\n\n        // 倒计时\n        this._timeRemaining -= deltaTime;\n\n        // 每秒通知一次统计更新（优化性能）\n        if (Math.floor(this._timeRemaining * 10) % 10 === 0) {\n            this.notifyStatsChange();\n        }\n\n        // 倒计时结束\n        if (this._timeRemaining <= 0) {\n            this._timeRemaining = 0;\n            this.onTimeUp();\n            return;\n        }\n\n        // 实时检查胜负条件\n        this.checkWinConditions();\n    }\n\n    onDestroy() {\n        if (GameManager._instance === this) {\n            GameManager._instance = null;\n        }\n    }\n\n    // ============ 游戏流程控制 ============\n\n    /**\n     * 开始游戏\n     */\n    public startGame() {\n        if (this._currentState !== GameState.WAITING) {\n            console.warn('[GameManager] 游戏已经开始，无法重复开始');\n            return;\n        }\n\n        console.log('[GameManager] 游戏开始！');\n\n        this._currentState = GameState.PLAYING;\n        this._timeRemaining = this.gameDuration;\n\n        // 重置统计\n        this._oreCollected = 0;\n        this._survivorsEscaped = 0;\n        this._survivorsEliminated = 0;\n\n        this.notifyStateChange();\n        this.notifyStatsChange();\n    }\n\n    /**\n     * 暂停游戏\n     */\n    public pauseGame() {\n        if (this._currentState === GameState.PLAYING) {\n            console.log('[GameManager] 游戏暂停');\n            // 这里可以添加暂停逻辑\n        }\n    }\n\n    /**\n     * 重新开始游戏\n     */\n    public restartGame() {\n        console.log('[GameManager] 重新开始游戏');\n\n        // 重置游戏状态\n        this._currentState = GameState.WAITING;\n        this._timeRemaining = this.gameDuration;\n        this._oreCollected = 0;\n        this._survivorsEscaped = 0;\n        this._survivorsEliminated = 0;\n\n        // 重置所有角色\n        for (const character of this._allCharacters) {\n            character.reset();\n        }\n\n        // 延迟启动\n        this.scheduleOnce(() => {\n            this.startGame();\n        }, 0.5);\n    }\n\n    /**\n     * 结束游戏\n     */\n    private endGame(result: GameState) {\n        if (this._currentState !== GameState.PLAYING) return;\n\n        console.log(`[GameManager] 游戏结束！结果：${result}`);\n\n        this._currentState = result;\n        this.notifyStateChange();\n    }\n\n    // ============ 胜负判定 ============\n\n    /**\n     * 检查胜负条件\n     */\n    private checkWinConditions() {\n        // 条件1：淘汰人数 >= 3，追捕者胜利\n        if (this._survivorsEliminated >= this.eliminationsToWin) {\n            this.endGame(GameState.HUNTER_WIN);\n            return;\n        }\n\n        // 条件2：逃脱人数 >= 3，逃生者胜利\n        if (this._survivorsEscaped >= this.survivorsToWin) {\n            this.endGame(GameState.SURVIVOR_WIN);\n            return;\n        }\n    }\n\n    /**\n     * 时间到\n     */\n    private onTimeUp() {\n        console.log('[GameManager] 时间到！');\n\n        // 条件3：倒计时结束且逃脱人数 < 2，追捕者胜利\n        if (this._survivorsEscaped < 2) {\n            this.endGame(GameState.HUNTER_WIN);\n        }\n        // 条件4：倒计时结束且逃脱人数 == 2，平局\n        else if (this._survivorsEscaped === 2) {\n            this.endGame(GameState.DRAW);\n        }\n        // 条件5：倒计时结束且逃脱人数 >= 3，逃生者胜利（已在checkWinConditions中处理）\n        else {\n            this.endGame(GameState.SURVIVOR_WIN);\n        }\n    }\n\n    // ============ 统计系统 ============\n\n    /**\n     * 刷新角色列表\n     */\n    public refreshCharacters() {\n        this._allCharacters = this.node.scene.getComponentsInChildren(CharacterState);\n        console.log(`[GameManager] 缓存了 ${this._allCharacters.length} 个角色`);\n    }\n\n    /**\n     * 注册角色状态变化监听\n     */\n    private registerCharacterListeners() {\n        for (const character of this._allCharacters) {\n            character.onStateChange((oldState, newState) => {\n                // 监听淘汰\n                if (newState === CharacterStateType.ELIMINATED) {\n                    this.onSurvivorEliminated(character.node);\n                }\n            });\n        }\n    }\n\n    /**\n     * 矿石被拾取\n     */\n    public onOreCollected(oreNode: Node) {\n        this._oreCollected++;\n        console.log(`[GameManager] 矿石被拾取，当前数量：${this._oreCollected}/${this.oresRequiredForExit}`);\n        this.notifyStatsChange();\n\n        // 检查是否达到生成逃生门的条件\n        if (this._oreCollected >= this.oresRequiredForExit && !this._exitZoneGenerated) {\n            this.generateExitZone();\n        }\n    }\n\n    /**\n     * 逃生者逃脱\n     */\n    public onSurvivorEscaped(survivorNode: Node) {\n        this._survivorsEscaped++;\n        console.log(`[GameManager] 逃生者逃脱，当前数量：${this._survivorsEscaped}`);\n        this.notifyStatsChange();\n\n        // 立即检查胜负条件\n        this.checkWinConditions();\n    }\n\n    /**\n     * 逃生者被淘汰\n     */\n    private onSurvivorEliminated(survivorNode: Node) {\n        this._survivorsEliminated++;\n        console.log(`[GameManager] 逃生者被淘汰，当前数量：${this._survivorsEliminated}`);\n        this.notifyStatsChange();\n\n        // 立即检查胜负条件\n        this.checkWinConditions();\n    }\n\n    // ============ 逃生门生成系统 ============\n\n    /**\n     * 生成逃生门\n     */\n    private generateExitZone() {\n        console.log('[GameManager] 矿石收集完成，生成逃生门！');\n\n        this._exitZoneGenerated = true;\n\n        // 方式1：如果提供了预制体，使用预制体生成\n        if (this.exitZonePrefab) {\n            this._exitZoneNode = instantiate(this.exitZonePrefab);\n            this._exitZoneNode.setParent(this.node.scene);\n\n            // 设置位置\n            if (this.exitZoneSpawnPoint) {\n                // 如果指定了生成点，使用生成点位置\n                this._exitZoneNode.setWorldPosition(this.exitZoneSpawnPoint.getWorldPosition());\n            } else {\n                // 否则使用默认位置（场景中心偏远处）\n                this._exitZoneNode.setPosition(new Vec3(20, 0, 20));\n            }\n\n            console.log(`[GameManager] 逃生门已在预制体方式生成，位置：${this._exitZoneNode.position}`);\n        }\n        // 方式2：如果没有预制体，激活场景中已存在但隐藏的ExitZone节点\n        else {\n            // 查找场景中名为ExitZone的隐藏节点\n            const existingExitZone = this.findExitZoneInScene();\n            if (existingExitZone) {\n                existingExitZone.active = true;\n                this._exitZoneNode = existingExitZone;\n                console.log(`[GameManager] 逃生门已激活（场景中已存在的节点）`);\n            } else {\n                console.warn('[GameManager] 未找到ExitZone预制体或场景节点！请在场景中添加ExitZone节点（初始隐藏）或绑定预制体');\n            }\n        }\n\n        // 通知UI更新（可以显示\"逃生门已开启\"提示）\n        this.notifyStatsChange();\n    }\n\n    /**\n     * 查找场景中的ExitZone节点\n     */\n    private findExitZoneInScene(): Node | null {\n        // 查找所有子节点\n        const allNodes = this.node.scene.children;\n        for (const node of allNodes) {\n            if (node.name.toLowerCase().includes('exit') || node.name.toLowerCase().includes('door')) {\n                return node;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 检查逃生门是否已生成\n     */\n    public isExitZoneGenerated(): boolean {\n        return this._exitZoneGenerated;\n    }\n\n    /**\n     * 获取生成逃生门所需矿石数量（任务3.2新增）\n     */\n    public getOresRequiredForExit(): number {\n        return this.oresRequiredForExit;\n    }\n\n    // ============ 查询接口 ============\n\n    /**\n     * 获取当前游戏状态\n     */\n    public getCurrentState(): GameState {\n        return this._currentState;\n    }\n\n    /**\n     * 获取游戏统计数据\n     */\n    public getStats(): GameStats {\n        return {\n            oreCollected: this._oreCollected,\n            survivorsEscaped: this._survivorsEscaped,\n            survivorsEliminated: this._survivorsEliminated,\n            timeRemaining: this._timeRemaining\n        };\n    }\n\n    /**\n     * 获取剩余时间（秒）\n     */\n    public getTimeRemaining(): number {\n        return this._timeRemaining;\n    }\n\n    /**\n     * 获取剩余时间（格式化为MM:SS）\n     */\n    public getTimeRemainingFormatted(): string {\n        const minutes = Math.floor(this._timeRemaining / 60);\n        const seconds = Math.floor(this._timeRemaining % 60);\n        return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n    }\n\n    /**\n     * 是否游戏进行中\n     */\n    public isPlaying(): boolean {\n        return this._currentState === GameState.PLAYING;\n    }\n\n    /**\n     * 是否游戏结束\n     */\n    public isGameOver(): boolean {\n        return this._currentState === GameState.HUNTER_WIN ||\n               this._currentState === GameState.SURVIVOR_WIN ||\n               this._currentState === GameState.DRAW;\n    }\n\n    // ============ 回调系统 ============\n\n    /**\n     * 注册游戏状态变化回调\n     */\n    public onStateChange(callback: GameStateCallback) {\n        this._stateChangeCallbacks.push(callback);\n    }\n\n    /**\n     * 通知游戏状态变化\n     */\n    private notifyStateChange() {\n        const stats = this.getStats();\n        for (const callback of this._stateChangeCallbacks) {\n            callback(this._currentState, stats);\n        }\n    }\n\n    /**\n     * 注册游戏统计变化回调\n     */\n    public onStatsChange(callback: GameStatsCallback) {\n        this._statsChangeCallbacks.push(callback);\n    }\n\n    /**\n     * 通知游戏统计变化\n     */\n    private notifyStatsChange() {\n        const stats = this.getStats();\n        for (const callback of this._statsChangeCallbacks) {\n            callback(stats);\n        }\n    }\n\n    // ============ 单例访问 ============\n\n    /**\n     * 获取GameManager单例\n     */\n    public static getInstance(): GameManager | null {\n        return GameManager._instance;\n    }\n\n    // ============ 调试功能 ============\n\n    /**\n     * 设置剩余时间（用于测试）\n     */\n    public setTimeRemaining(seconds: number) {\n        this._timeRemaining = seconds;\n        console.log(`[GameManager] 剩余时间设置为 ${seconds} 秒`);\n        this.notifyStatsChange();\n    }\n\n    /**\n     * 模拟逃脱（用于测试）\n     */\n    public debugEscape(count: number = 1) {\n        for (let i = 0; i < count; i++) {\n            this.onSurvivorEscaped(new Node('DebugSurvivor'));\n        }\n    }\n\n    /**\n     * 模拟淘汰（用于测试）\n     */\n    public debugEliminate(count: number = 1) {\n        for (let i = 0; i < count; i++) {\n            this._survivorsEliminated++;\n        }\n        this.notifyStatsChange();\n        this.checkWinConditions();\n    }\n\n    /**\n     * 获取游戏信息（调试用）\n     */\n    public getGameInfo(): string {\n        return `状态:${this._currentState}, 时间:${this.getTimeRemainingFormatted()}, 矿石:${this._oreCollected}, 逃脱:${this._survivorsEscaped}, 淘汰:${this._survivorsEliminated}`;\n    }\n}\n"]}