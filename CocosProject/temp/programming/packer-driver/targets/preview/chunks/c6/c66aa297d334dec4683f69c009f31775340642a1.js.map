{"version":3,"sources":["file:///Users/clare/Desktop/%E5%89%8D%E5%93%A8AI%E5%B0%8F%E8%AF%BE/ClareProject/Cute-Pet-Escape-Project/CocosProject/assets/scripts/ui/RoomUI.ts"],"names":["_decorator","Component","Node","Label","Button","Color","NetworkManager","ccclass","property","RoomUI","_networkManager","start","console","log","getInstance","error","isConnected","showStatus","setupButtons","setupNetworkEvents","updateRoomInfo","leaveRoomButton","node","on","EventType","CLICK","onLeaveRoomClick","data","sessionId","code","showRoomId","roomIdLabel","roomId","getRoomId","string","showPlayerCount","playerCountLabel","playerCount","getPlayerCount","room","getRoom","maxPlayers","state","leaveRoom","message","isError","statusLabel","color","refreshUI","onDestroy","off"],"mappings":"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","sourcesContent":["// 文件名: RoomUI.ts\n// 功能: 游戏房间UI - 显示房间信息和玩家列表（任务4.1）\n\nimport { _decorator, Component, Node, Label, Button, Color } from 'cc';\nimport { NetworkManager } from '../network/NetworkManager';\nconst { ccclass, property } = _decorator;\n\n@ccclass('RoomUI')\nexport class RoomUI extends Component {\n    // ============ UI元素 ============\n    @property(Label)\n    public roomIdLabel: Label | null = null; // 房间ID显示\n\n    @property(Label)\n    public playerCountLabel: Label | null = null; // 玩家数量显示\n\n    @property(Label)\n    public statusLabel: Label | null = null; // 连接状态显示\n\n    @property(Button)\n    public leaveRoomButton: Button | null = null; // 离开房间按钮（可选）\n\n    @property(Node)\n    public playerListContainer: Node | null = null; // 玩家列表容器（可选）\n\n    // ============ 配置 ============\n    @property\n    public showRoomId: boolean = true; // 是否显示房间ID\n\n    @property\n    public showPlayerCount: boolean = true; // 是否显示玩家数量\n\n    // 私有成员\n    private _networkManager: NetworkManager | null = null;\n\n    start() {\n        console.log('[RoomUI] 房间UI初始化');\n\n        // 获取NetworkManager\n        this._networkManager = NetworkManager.getInstance();\n        if (!this._networkManager) {\n            console.error('[RoomUI] NetworkManager未找到！');\n            return;\n        }\n\n        // 检查是否已连接到房间\n        if (!this._networkManager.isConnected()) {\n            console.error('[RoomUI] 未连接到房间！');\n            this.showStatus('未连接到房间', true);\n            return;\n        }\n\n        // 绑定按钮事件\n        this.setupButtons();\n\n        // 注册网络事件\n        this.setupNetworkEvents();\n\n        // 初始化显示\n        this.updateRoomInfo();\n        this.showStatus('已连接', false);\n    }\n\n    /**\n     * 设置按钮事件\n     */\n    private setupButtons() {\n        if (this.leaveRoomButton) {\n            this.leaveRoomButton.node.on(Button.EventType.CLICK, this.onLeaveRoomClick, this);\n        }\n    }\n\n    /**\n     * 设置网络事件\n     */\n    private setupNetworkEvents() {\n        if (!this._networkManager) return;\n\n        // 监听玩家加入\n        this._networkManager.on('playerAdded', (data: any) => {\n            console.log(`[RoomUI] 玩家加入: ${data.sessionId}`);\n            this.updateRoomInfo();\n        });\n\n        // 监听玩家离开\n        this._networkManager.on('playerRemoved', (data: any) => {\n            console.log(`[RoomUI] 玩家离开: ${data.sessionId}`);\n            this.updateRoomInfo();\n        });\n\n        // 监听断开连接\n        this._networkManager.on('disconnected', (code: number) => {\n            console.log(`[RoomUI] 连接断开 [${code}]`);\n            this.showStatus('连接已断开', true);\n        });\n\n        // 监听错误\n        this._networkManager.on('error', (error: any) => {\n            console.error('[RoomUI] 网络错误:', error);\n            this.showStatus('网络错误', true);\n        });\n    }\n\n    /**\n     * 更新房间信息显示\n     */\n    private updateRoomInfo() {\n        if (!this._networkManager) return;\n\n        // 更新房间ID\n        if (this.showRoomId && this.roomIdLabel) {\n            const roomId = this._networkManager.getRoomId();\n            this.roomIdLabel.string = `房间ID: ${roomId}`;\n        }\n\n        // 更新玩家数量\n        if (this.showPlayerCount && this.playerCountLabel) {\n            const playerCount = this._networkManager.getPlayerCount();\n            const room = this._networkManager.getRoom();\n            const maxPlayers = room ? room.state.maxPlayers : 5;\n            this.playerCountLabel.string = `玩家: ${playerCount}/${maxPlayers}`;\n        }\n    }\n\n    /**\n     * 离开房间按钮点击\n     */\n    private async onLeaveRoomClick() {\n        if (!this._networkManager) return;\n\n        console.log('[RoomUI] 离开房间');\n        await this._networkManager.leaveRoom();\n\n        // 返回大厅场景\n        // director.loadScene('LobbyScene');\n    }\n\n    /**\n     * 显示状态信息\n     */\n    private showStatus(message: string, isError: boolean) {\n        if (!this.statusLabel) return;\n\n        this.statusLabel.string = message;\n        this.statusLabel.color = isError\n            ? new Color(255, 0, 0, 255)  // 红色\n            : new Color(0, 255, 0, 255); // 绿色\n    }\n\n    /**\n     * 手动刷新UI（供外部调用）\n     */\n    public refreshUI() {\n        this.updateRoomInfo();\n    }\n\n    onDestroy() {\n        // 清理事件监听\n        if (this.leaveRoomButton) {\n            this.leaveRoomButton.node.off(Button.EventType.CLICK, this.onLeaveRoomClick, this);\n        }\n    }\n}\n"]}