{"version":3,"sources":["file:///Users/clare/Desktop/%E5%89%8D%E5%93%A8AI%E5%B0%8F%E8%AF%BE/ClareProject/Cute-Pet-Escape-Project/CocosProject/assets/scripts/network/RemotePlayerManager.ts"],"names":["_decorator","Component","Node","Prefab","instantiate","Vec3","NetworkManager","RemotePlayerController","ccclass","property","RemotePlayerManager","_networkManager","_remotePlayers","Map","start","console","log","getInstance","error","remotePlayerPrefab","setupNetworkEvents","createExistingPlayers","on","data","onPlayerAdded","sessionId","player","onPlayerRemoved","onPlayerChanged","allPlayers","getAllPlayers","localSessionId","getLocalSessionId","size","forEach","playerData","createRemotePlayer","destroyRemotePlayer","playerNode","get","warn","remoteController","getComponent","updatePlayerState","has","name","substring","playersContainer","setParent","node","scene","setPosition","x","y","z","setRotationFromEuler","rotationY","addComponent","initialize","set","enableDebugLog","destroy","delete","getAllRemotePlayers","getRemotePlayerCount","getRemotePlayer","onDestroy","isValid","clear"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGSA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,I,OAAAA,I;;AAClDC,MAAAA,c,iBAAAA,c;;AACAC,MAAAA,sB,iBAAAA,sB;;;;;2FALT;AACA;;;;;OAKM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBT,U;;qCAGjBU,mB,WADZF,OAAO,CAAC,qBAAD,C,UAGHC,QAAQ,CAACN,MAAD,C,UAGRM,QAAQ,CAACP,IAAD,C,2BANb,MACaQ,mBADb,SACyCT,SADzC,CACmD;AAAA;AAAA;;AAC/C;AAD+C;;AAGE;AAHF;;AAMF;AANE;;AASR;AAEvC;AAX+C,eAYvCU,eAZuC,GAYE,IAZF;AAAA,eAavCC,cAbuC,GAaH,IAAIC,GAAJ,EAbG;AAAA;;AAaQ;AAEvDC,QAAAA,KAAK,GAAG;AACJC,UAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ,EADI,CAGJ;;AACA,eAAKL,eAAL,GAAuB;AAAA;AAAA,gDAAeM,WAAf,EAAvB;;AACA,cAAI,CAAC,KAAKN,eAAV,EAA2B;AACvBI,YAAAA,OAAO,CAACG,KAAR,CAAc,0CAAd;AACA;AACH,WARG,CAUJ;;;AACA,cAAI,CAAC,KAAKC,kBAAV,EAA8B;AAC1BJ,YAAAA,OAAO,CAACG,KAAR,CAAc,mCAAd;AACA;AACH,WAdG,CAgBJ;;;AACA,eAAKE,kBAAL,GAjBI,CAmBJ;;AACA,eAAKC,qBAAL;AACH;AAED;AACJ;AACA;;;AACYD,QAAAA,kBAAkB,GAAG;AACzB,cAAI,CAAC,KAAKT,eAAV,EAA2B,OADF,CAGzB;;AACA,eAAKA,eAAL,CAAqBW,EAArB,CAAwB,aAAxB,EAAwCC,IAAD,IAAe;AAClD,iBAAKC,aAAL,CAAmBD,IAAI,CAACE,SAAxB,EAAmCF,IAAI,CAACG,MAAxC;AACH,WAFD,EAJyB,CAQzB;;;AACA,eAAKf,eAAL,CAAqBW,EAArB,CAAwB,eAAxB,EAA0CC,IAAD,IAAe;AACpD,iBAAKI,eAAL,CAAqBJ,IAAI,CAACE,SAA1B;AACH,WAFD,EATyB,CAazB;;;AACA,eAAKd,eAAL,CAAqBW,EAArB,CAAwB,eAAxB,EAA0CC,IAAD,IAAe;AACpD,iBAAKK,eAAL,CAAqBL,IAAI,CAACE,SAA1B,EAAqCF,IAAI,CAACG,MAA1C;AACH,WAFD;AAGH;AAED;AACJ;AACA;;;AACYL,QAAAA,qBAAqB,GAAG;AAC5B,cAAI,CAAC,KAAKV,eAAV,EAA2B;;AAE3B,cAAMkB,UAAU,GAAG,KAAKlB,eAAL,CAAqBmB,aAArB,EAAnB;;AACA,cAAMC,cAAc,GAAG,KAAKpB,eAAL,CAAqBqB,iBAArB,EAAvB;;AAEAjB,UAAAA,OAAO,CAACC,GAAR,2DAA2Ca,UAAU,CAACI,IAAtD;AAEAJ,UAAAA,UAAU,CAACK,OAAX,CAAmB,CAACC,UAAD,EAAyBV,SAAzB,KAA+C;AAC9D;AACA,gBAAIA,SAAS,KAAKM,cAAlB,EAAkC;AAC9BhB,cAAAA,OAAO,CAACC,GAAR,kEAA6CS,SAA7C;AACA;AACH,aAL6D,CAO9D;;;AACA,iBAAKW,kBAAL,CAAwBX,SAAxB,EAAmCU,UAAnC;AACH,WATD;AAUH;AAED;AACJ;AACA;;;AACYX,QAAAA,aAAa,CAACC,SAAD,EAAoBU,UAApB,EAA4C;AAC7D;AACA,cAAIV,SAAS,KAAK,KAAKd,eAAL,CAAsBqB,iBAAtB,EAAlB,EAA6D;AACzDjB,YAAAA,OAAO,CAACC,GAAR,gGAAkDS,SAAlD;AACA;AACH;;AAEDV,UAAAA,OAAO,CAACC,GAAR,4DAA4CS,SAA5C;AACA,eAAKW,kBAAL,CAAwBX,SAAxB,EAAmCU,UAAnC;AACH;AAED;AACJ;AACA;;;AACYR,QAAAA,eAAe,CAACF,SAAD,EAAoB;AACvCV,UAAAA,OAAO,CAACC,GAAR,sDAA2CS,SAA3C;AACA,eAAKY,mBAAL,CAAyBZ,SAAzB;AACH;AAED;AACJ;AACA;;;AACYG,QAAAA,eAAe,CAACH,SAAD,EAAoBU,UAApB,EAA4C;AAC/D,cAAMG,UAAU,GAAG,KAAK1B,cAAL,CAAoB2B,GAApB,CAAwBd,SAAxB,CAAnB;;AACA,cAAI,CAACa,UAAL,EAAiB;AACbvB,YAAAA,OAAO,CAACyB,IAAR,wEAA+Cf,SAA/C;AACA;AACH,WAL8D,CAO/D;;;AACA,cAAMgB,gBAAgB,GAAGH,UAAU,CAACI,YAAX;AAAA;AAAA,+DAAzB;;AACA,cAAID,gBAAJ,EAAsB;AAClBA,YAAAA,gBAAgB,CAACE,iBAAjB,CAAmCR,UAAnC;AACH;AACJ;AAED;AACJ;AACA;;;AACYC,QAAAA,kBAAkB,CAACX,SAAD,EAAoBU,UAApB,EAA4C;AAClE;AACA,cAAI,KAAKvB,cAAL,CAAoBgC,GAApB,CAAwBnB,SAAxB,CAAJ,EAAwC;AACpCV,YAAAA,OAAO,CAACyB,IAAR,4DAA6Cf,SAA7C;AACA;AACH,WALiE,CAOlE;;;AACA,cAAMa,UAAU,GAAGlC,WAAW,CAAC,KAAKe,kBAAN,CAA9B;AACAmB,UAAAA,UAAU,CAACO,IAAX,qBAAkCV,UAAU,CAACU,IAA7C,SAAqDpB,SAAS,CAACqB,SAAV,CAAoB,CAApB,EAAuB,CAAvB,CAArD,CATkE,CAWlE;;AACA,cAAI,KAAKC,gBAAT,EAA2B;AACvBT,YAAAA,UAAU,CAACU,SAAX,CAAqB,KAAKD,gBAA1B;AACH,WAFD,MAEO;AACHT,YAAAA,UAAU,CAACU,SAAX,CAAqB,KAAKC,IAAL,CAAUC,KAA/B;AACH,WAhBiE,CAkBlE;;;AACAZ,UAAAA,UAAU,CAACa,WAAX,CAAuB,IAAI9C,IAAJ,CAAS8B,UAAU,CAACiB,CAApB,EAAuBjB,UAAU,CAACkB,CAAlC,EAAqClB,UAAU,CAACmB,CAAhD,CAAvB;AACAhB,UAAAA,UAAU,CAACiB,oBAAX,CAAgC,CAAhC,EAAmCpB,UAAU,CAACqB,SAA9C,EAAyD,CAAzD,EApBkE,CAsBlE;;AACA,cAAIf,gBAAgB,GAAGH,UAAU,CAACI,YAAX;AAAA;AAAA,+DAAvB;;AACA,cAAI,CAACD,gBAAL,EAAuB;AACnBA,YAAAA,gBAAgB,GAAGH,UAAU,CAACmB,YAAX;AAAA;AAAA,iEAAnB;AACH,WA1BiE,CA4BlE;;;AACAhB,UAAAA,gBAAgB,CAACiB,UAAjB,CAA4BjC,SAA5B,EAAuCU,UAAvC,EA7BkE,CA+BlE;;AACA,eAAKvB,cAAL,CAAoB+C,GAApB,CAAwBlC,SAAxB,EAAmCa,UAAnC;;AAEAvB,UAAAA,OAAO,CAACC,GAAR,8EAA+CmB,UAAU,CAACU,IAA1D,UAAmEpB,SAAnE;;AAEA,cAAI,KAAKmC,cAAT,EAAyB;AACrB7C,YAAAA,OAAO,CAACC,GAAR,wEAA8C,KAAKJ,cAAL,CAAoBqB,IAAlE;AACH;AACJ;AAED;AACJ;AACA;;;AACYI,QAAAA,mBAAmB,CAACZ,SAAD,EAAoB;AAC3C,cAAMa,UAAU,GAAG,KAAK1B,cAAL,CAAoB2B,GAApB,CAAwBd,SAAxB,CAAnB;;AACA,cAAI,CAACa,UAAL,EAAiB;AACbvB,YAAAA,OAAO,CAACyB,IAAR,wEAA+Cf,SAA/C;AACA;AACH,WAL0C,CAO3C;;;AACAa,UAAAA,UAAU,CAACuB,OAAX,GAR2C,CAU3C;;AACA,eAAKjD,cAAL,CAAoBkD,MAApB,CAA2BrC,SAA3B;;AAEAV,UAAAA,OAAO,CAACC,GAAR,kEAA6CS,SAA7C;;AAEA,cAAI,KAAKmC,cAAT,EAAyB;AACrB7C,YAAAA,OAAO,CAACC,GAAR,wEAA8C,KAAKJ,cAAL,CAAoBqB,IAAlE;AACH;AACJ;AAED;AACJ;AACA;;;AACW8B,QAAAA,mBAAmB,GAAsB;AAC5C,iBAAO,KAAKnD,cAAZ;AACH;AAED;AACJ;AACA;;;AACWoD,QAAAA,oBAAoB,GAAW;AAClC,iBAAO,KAAKpD,cAAL,CAAoBqB,IAA3B;AACH;AAED;AACJ;AACA;;;AACWgC,QAAAA,eAAe,CAACxC,SAAD,EAAiC;AACnD,iBAAO,KAAKb,cAAL,CAAoB2B,GAApB,CAAwBd,SAAxB,KAAsC,IAA7C;AACH;;AAEDyC,QAAAA,SAAS,GAAG;AACR;AACA,eAAKtD,cAAL,CAAoBsB,OAApB,CAA6BI,UAAD,IAAgB;AACxC,gBAAIA,UAAU,IAAIA,UAAU,CAAC6B,OAA7B,EAAsC;AAClC7B,cAAAA,UAAU,CAACuB,OAAX;AACH;AACJ,WAJD;;AAKA,eAAKjD,cAAL,CAAoBwD,KAApB;AACH;;AA1N8C,O;;;;;iBAGJ,I;;;;;;;iBAGJ,I;;yFAEtC3D,Q;;;;;iBACgC,I","sourcesContent":["// 文件名: RemotePlayerManager.ts\n// 功能: 远程玩家管理器 - 管理所有远程玩家的创建和销毁（任务4.1）\n\nimport { _decorator, Component, Node, Prefab, instantiate, Vec3 } from 'cc';\nimport { NetworkManager, PlayerData } from './NetworkManager';\nimport { RemotePlayerController } from './RemotePlayerController';\nconst { ccclass, property } = _decorator;\n\n@ccclass('RemotePlayerManager')\nexport class RemotePlayerManager extends Component {\n    // ============ 配置 ============\n    @property(Prefab)\n    public remotePlayerPrefab: Prefab | null = null; // 远程玩家预制体\n\n    @property(Node)\n    public playersContainer: Node | null = null; // 玩家容器节点（可选）\n\n    @property\n    public enableDebugLog: boolean = true; // 是否启用调试日志\n\n    // 私有成员\n    private _networkManager: NetworkManager | null = null;\n    private _remotePlayers: Map<string, Node> = new Map(); // sessionId -> 玩家节点\n\n    start() {\n        console.log('[RemotePlayerManager] 远程玩家管理器初始化');\n\n        // 获取NetworkManager\n        this._networkManager = NetworkManager.getInstance();\n        if (!this._networkManager) {\n            console.error('[RemotePlayerManager] NetworkManager未找到！');\n            return;\n        }\n\n        // 检查预制体\n        if (!this.remotePlayerPrefab) {\n            console.error('[RemotePlayerManager] 远程玩家预制体未设置！');\n            return;\n        }\n\n        // 注册网络事件\n        this.setupNetworkEvents();\n\n        // 创建已存在的玩家（加入房间时房间内已有的玩家）\n        this.createExistingPlayers();\n    }\n\n    /**\n     * 设置网络事件\n     */\n    private setupNetworkEvents() {\n        if (!this._networkManager) return;\n\n        // 监听玩家加入\n        this._networkManager.on('playerAdded', (data: any) => {\n            this.onPlayerAdded(data.sessionId, data.player);\n        });\n\n        // 监听玩家离开\n        this._networkManager.on('playerRemoved', (data: any) => {\n            this.onPlayerRemoved(data.sessionId);\n        });\n\n        // 监听玩家状态变化\n        this._networkManager.on('playerChanged', (data: any) => {\n            this.onPlayerChanged(data.sessionId, data.player);\n        });\n    }\n\n    /**\n     * 创建已存在的玩家\n     */\n    private createExistingPlayers() {\n        if (!this._networkManager) return;\n\n        const allPlayers = this._networkManager.getAllPlayers();\n        const localSessionId = this._networkManager.getLocalSessionId();\n\n        console.log(`[RemotePlayerManager] 当前房间有 ${allPlayers.size} 个玩家`);\n\n        allPlayers.forEach((playerData: PlayerData, sessionId: string) => {\n            // 跳过本地玩家\n            if (sessionId === localSessionId) {\n                console.log(`[RemotePlayerManager] 跳过本地玩家: ${sessionId}`);\n                return;\n            }\n\n            // 创建远程玩家\n            this.createRemotePlayer(sessionId, playerData);\n        });\n    }\n\n    /**\n     * 玩家加入事件\n     */\n    private onPlayerAdded(sessionId: string, playerData: PlayerData) {\n        // 跳过本地玩家\n        if (sessionId === this._networkManager!.getLocalSessionId()) {\n            console.log(`[RemotePlayerManager] 本地玩家加入，跳过创建: ${sessionId}`);\n            return;\n        }\n\n        console.log(`[RemotePlayerManager] 新玩家加入: ${sessionId}`);\n        this.createRemotePlayer(sessionId, playerData);\n    }\n\n    /**\n     * 玩家离开事件\n     */\n    private onPlayerRemoved(sessionId: string) {\n        console.log(`[RemotePlayerManager] 玩家离开: ${sessionId}`);\n        this.destroyRemotePlayer(sessionId);\n    }\n\n    /**\n     * 玩家状态变化事件\n     */\n    private onPlayerChanged(sessionId: string, playerData: PlayerData) {\n        const playerNode = this._remotePlayers.get(sessionId);\n        if (!playerNode) {\n            console.warn(`[RemotePlayerManager] 玩家节点不存在: ${sessionId}`);\n            return;\n        }\n\n        // 更新远程玩家状态\n        const remoteController = playerNode.getComponent(RemotePlayerController);\n        if (remoteController) {\n            remoteController.updatePlayerState(playerData);\n        }\n    }\n\n    /**\n     * 创建远程玩家\n     */\n    private createRemotePlayer(sessionId: string, playerData: PlayerData) {\n        // 检查是否已存在\n        if (this._remotePlayers.has(sessionId)) {\n            console.warn(`[RemotePlayerManager] 玩家已存在: ${sessionId}`);\n            return;\n        }\n\n        // 实例化预制体\n        const playerNode = instantiate(this.remotePlayerPrefab!);\n        playerNode.name = `RemotePlayer_${playerData.name}_${sessionId.substring(0, 4)}`;\n\n        // 设置父节点\n        if (this.playersContainer) {\n            playerNode.setParent(this.playersContainer);\n        } else {\n            playerNode.setParent(this.node.scene);\n        }\n\n        // 设置初始位置\n        playerNode.setPosition(new Vec3(playerData.x, playerData.y, playerData.z));\n        playerNode.setRotationFromEuler(0, playerData.rotationY, 0);\n\n        // 获取或添加RemotePlayerController组件\n        let remoteController = playerNode.getComponent(RemotePlayerController);\n        if (!remoteController) {\n            remoteController = playerNode.addComponent(RemotePlayerController);\n        }\n\n        // 初始化远程玩家控制器\n        remoteController.initialize(sessionId, playerData);\n\n        // 保存引用\n        this._remotePlayers.set(sessionId, playerNode);\n\n        console.log(`[RemotePlayerManager] 创建远程玩家成功: ${playerData.name} (${sessionId})`);\n\n        if (this.enableDebugLog) {\n            console.log(`[RemotePlayerManager] 当前远程玩家数: ${this._remotePlayers.size}`);\n        }\n    }\n\n    /**\n     * 销毁远程玩家\n     */\n    private destroyRemotePlayer(sessionId: string) {\n        const playerNode = this._remotePlayers.get(sessionId);\n        if (!playerNode) {\n            console.warn(`[RemotePlayerManager] 玩家节点不存在: ${sessionId}`);\n            return;\n        }\n\n        // 销毁节点\n        playerNode.destroy();\n\n        // 移除引用\n        this._remotePlayers.delete(sessionId);\n\n        console.log(`[RemotePlayerManager] 销毁远程玩家: ${sessionId}`);\n\n        if (this.enableDebugLog) {\n            console.log(`[RemotePlayerManager] 当前远程玩家数: ${this._remotePlayers.size}`);\n        }\n    }\n\n    /**\n     * 获取所有远程玩家节点\n     */\n    public getAllRemotePlayers(): Map<string, Node> {\n        return this._remotePlayers;\n    }\n\n    /**\n     * 获取远程玩家数量\n     */\n    public getRemotePlayerCount(): number {\n        return this._remotePlayers.size;\n    }\n\n    /**\n     * 获取指定远程玩家节点\n     */\n    public getRemotePlayer(sessionId: string): Node | null {\n        return this._remotePlayers.get(sessionId) || null;\n    }\n\n    onDestroy() {\n        // 销毁所有远程玩家\n        this._remotePlayers.forEach((playerNode) => {\n            if (playerNode && playerNode.isValid) {\n                playerNode.destroy();\n            }\n        });\n        this._remotePlayers.clear();\n    }\n}\n"]}