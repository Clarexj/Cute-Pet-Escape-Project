{"version":3,"sources":["file:///Users/clare/Desktop/%E5%89%8D%E5%93%A8AI%E5%B0%8F%E8%AF%BE/ClareProject/Cute-Pet-Escape-Project/CocosProject/assets/scripts/Joystick.ts"],"names":["_decorator","Component","Node","Vec2","Vec3","ccclass","property","Joystick","_touchId","_stickPos","_touchStartPos","_direction","_strength","onLoad","node","on","EventType","TOUCH_START","onTouchStart","TOUCH_MOVE","onTouchMove","TOUCH_END","onTouchEnd","TOUCH_CANCEL","onDestroy","off","event","touch","getID","uiPos","getUILocation","set","x","y","delta","distance","length","maxRadius","normalize","multiplyScalar","stick","setPosition","Math","min","getDirection","clone","getStrength","isActive"],"mappings":"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","sourcesContent":["// 文件名: Joystick.ts\n// 功能：虚拟摇杆控制组件，用于触摸屏操作\n\nimport { _decorator, Component, Node, Vec2, Vec3, UITransform, EventTouch, systemEvent, SystemEvent } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('Joystick')\nexport class Joystick extends Component {\n    @property(Node)\n    public stick: Node = null!; // 摇杆中心的小圆点\n\n    @property\n    public maxRadius: number = 100; // 摇杆最大拖动半径\n\n    private _touchId: number = -1; // 当前触摸ID\n    private _stickPos: Vec3 = new Vec3(); // 摇杆位置\n    private _touchStartPos: Vec2 = new Vec2(); // 触摸起始位置\n    private _direction: Vec2 = new Vec2(0, 0); // 归一化方向向量 (-1到1)\n    private _strength: number = 0; // 摇杆偏移强度 (0到1)\n\n    onLoad() {\n        // 监听触摸事件\n        this.node.on(Node.EventType.TOUCH_START, this.onTouchStart, this);\n        this.node.on(Node.EventType.TOUCH_MOVE, this.onTouchMove, this);\n        this.node.on(Node.EventType.TOUCH_END, this.onTouchEnd, this);\n        this.node.on(Node.EventType.TOUCH_CANCEL, this.onTouchEnd, this);\n    }\n\n    onDestroy() {\n        this.node.off(Node.EventType.TOUCH_START, this.onTouchStart, this);\n        this.node.off(Node.EventType.TOUCH_MOVE, this.onTouchMove, this);\n        this.node.off(Node.EventType.TOUCH_END, this.onTouchEnd, this);\n        this.node.off(Node.EventType.TOUCH_CANCEL, this.onTouchEnd, this);\n    }\n\n    private onTouchStart(event: EventTouch) {\n        // 记录触摸ID和起始位置\n        this._touchId = event.touch!.getID();\n        const uiPos = event.getUILocation();\n        this._touchStartPos.set(uiPos.x, uiPos.y);\n    }\n\n    private onTouchMove(event: EventTouch) {\n        // 只处理当前触摸\n        if (event.touch!.getID() !== this._touchId) return;\n\n        const uiPos = event.getUILocation();\n\n        // 计算偏移量\n        const delta = new Vec2(\n            uiPos.x - this._touchStartPos.x,\n            uiPos.y - this._touchStartPos.y\n        );\n\n        const distance = delta.length();\n\n        // 限制在最大半径内\n        if (distance > this.maxRadius) {\n            delta.normalize().multiplyScalar(this.maxRadius);\n        }\n\n        // 更新摇杆视觉位置\n        this.stick.setPosition(delta.x, delta.y, 0);\n\n        // 计算方向和强度\n        this._strength = Math.min(distance / this.maxRadius, 1.0);\n\n        if (distance > 0.01) {\n            this._direction.set(delta.x, delta.y);\n            this._direction.normalize();\n        } else {\n            this._direction.set(0, 0);\n        }\n    }\n\n    private onTouchEnd(event: EventTouch) {\n        // 只处理当前触摸\n        if (event.touch!.getID() !== this._touchId) return;\n\n        // 重置摇杆\n        this._touchId = -1;\n        this.stick.setPosition(0, 0, 0);\n        this._direction.set(0, 0);\n        this._strength = 0;\n    }\n\n    /**\n     * 获取摇杆方向 (归一化的2D向量)\n     * @returns Vec2 x和y范围都是-1到1\n     */\n    public getDirection(): Vec2 {\n        return this._direction.clone();\n    }\n\n    /**\n     * 获取摇杆强度\n     * @returns number 0到1之间的值\n     */\n    public getStrength(): number {\n        return this._strength;\n    }\n\n    /**\n     * 是否正在操作摇杆\n     */\n    public isActive(): boolean {\n        return this._touchId !== -1;\n    }\n}\n"]}