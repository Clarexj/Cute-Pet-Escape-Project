{"version":3,"sources":["file:///Users/clare/Desktop/%E5%89%8D%E5%93%A8AI%E5%B0%8F%E8%AF%BE/ClareProject/Cute-Pet-Escape-Project/CocosProject/assets/scripts/CameraController.ts"],"names":["_decorator","Component","Node","Vec2","Canvas","CameraFollow","ccclass","property","CameraController","_touchId","_lastTouchPos","_isDragging","_tempVec2","onLoad","canvas","node","getComponent","on","EventType","TOUCH_START","onTouchStart","TOUCH_MOVE","onTouchMove","TOUCH_END","onTouchEnd","TOUCH_CANCEL","console","warn","onDestroy","off","event","uiPos","getUILocation","isInJoystickArea","touch","getID","set","x","y","deltaYaw","rotationSensitivity","cameraFollow","addYawAngle","joystickExclusionRadius","setRotationSensitivity","sensitivity","Math","max","min","isDragging"],"mappings":"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","sourcesContent":["// 文件名: CameraController.ts\n// 功能：处理屏幕右侧触摸拖拽来旋转摄像机（任务1.2）\n\nimport { _decorator, Component, Node, EventTouch, Vec2, UITransform, Canvas } from 'cc';\nimport { CameraFollow } from './CameraFollow';\nconst { ccclass, property } = _decorator;\n\n@ccclass('CameraController')\nexport class CameraController extends Component {\n    @property(CameraFollow)\n    public cameraFollow: CameraFollow = null!; // CameraFollow组件引用\n\n    @property(Node)\n    public joystickArea: Node = null!; // 摇杆区域节点（用于判断是否在摇杆区域内）\n\n    @property\n    public rotationSensitivity: number = 0.2; // 旋转灵敏度\n\n    @property\n    public joystickExclusionRadius: number = 250; // 摇杆排除半径（屏幕左侧多大范围不响应）\n\n    private _touchId: number = -1; // 当前触摸ID\n    private _lastTouchPos: Vec2 = new Vec2(); // 上一次触摸位置\n    private _isDragging: boolean = false; // 是否正在拖拽\n\n    // 性能优化：复用临时变量\n    private _tempVec2: Vec2 = new Vec2();\n\n    onLoad() {\n        // 监听Canvas上的触摸事件（全屏监听）\n        const canvas = this.node.getComponent(Canvas);\n        if (canvas) {\n            this.node.on(Node.EventType.TOUCH_START, this.onTouchStart, this);\n            this.node.on(Node.EventType.TOUCH_MOVE, this.onTouchMove, this);\n            this.node.on(Node.EventType.TOUCH_END, this.onTouchEnd, this);\n            this.node.on(Node.EventType.TOUCH_CANCEL, this.onTouchEnd, this);\n        } else {\n            console.warn('[CameraController] 请将此组件挂在Canvas节点上！');\n        }\n    }\n\n    onDestroy() {\n        this.node.off(Node.EventType.TOUCH_START, this.onTouchStart, this);\n        this.node.off(Node.EventType.TOUCH_MOVE, this.onTouchMove, this);\n        this.node.off(Node.EventType.TOUCH_END, this.onTouchEnd, this);\n        this.node.off(Node.EventType.TOUCH_CANCEL, this.onTouchEnd, this);\n    }\n\n    private onTouchStart(event: EventTouch) {\n        const uiPos = event.getUILocation();\n\n        // 检查是否在摇杆区域（左侧区域）\n        if (this.isInJoystickArea(uiPos)) {\n            return; // 在摇杆区域，不处理\n        }\n\n        // 记录触摸信息\n        this._touchId = event.touch!.getID();\n        this._lastTouchPos.set(uiPos.x, uiPos.y);\n        this._isDragging = true;\n    }\n\n    private onTouchMove(event: EventTouch) {\n        // 只处理当前触摸\n        if (event.touch!.getID() !== this._touchId || !this._isDragging) return;\n\n        const uiPos = event.getUILocation();\n\n        // 计算拖拽偏移量\n        this._tempVec2.set(\n            uiPos.x - this._lastTouchPos.x,\n            uiPos.y - this._lastTouchPos.y\n        );\n\n        // 水平拖拽控制摄像机水平旋转\n        const deltaYaw = this._tempVec2.x * this.rotationSensitivity;\n\n        if (this.cameraFollow) {\n            this.cameraFollow.addYawAngle(deltaYaw);\n        }\n\n        // 更新上一次触摸位置\n        this._lastTouchPos.set(uiPos.x, uiPos.y);\n    }\n\n    private onTouchEnd(event: EventTouch) {\n        // 只处理当前触摸\n        if (event.touch!.getID() !== this._touchId) return;\n\n        // 重置状态\n        this._touchId = -1;\n        this._isDragging = false;\n    }\n\n    /**\n     * 判断触摸位置是否在摇杆区域内\n     * @param uiPos UI坐标系的触摸位置（左下角为原点）\n     */\n    private isInJoystickArea(uiPos: Vec2): boolean {\n        // ✅ 修复：直接使用UI坐标判断\n        // UI坐标原点在左下角，x向右递增，y向上递增\n        // 屏幕左侧joystickExclusionRadius范围内视为摇杆区域\n        return uiPos.x < this.joystickExclusionRadius;\n    }\n\n    /**\n     * 设置旋转灵敏度\n     */\n    public setRotationSensitivity(sensitivity: number) {\n        this.rotationSensitivity = Math.max(0.05, Math.min(1.0, sensitivity));\n    }\n\n    /**\n     * 是否正在拖拽旋转摄像机\n     */\n    public isDragging(): boolean {\n        return this._isDragging;\n    }\n}\n"]}