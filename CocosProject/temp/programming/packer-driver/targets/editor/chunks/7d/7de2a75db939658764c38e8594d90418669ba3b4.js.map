{"version":3,"sources":["file:///Users/clare/Desktop/%E5%89%8D%E5%93%A8AI%E5%B0%8F%E8%AF%BE/ClareProject/Cute-Pet-Escape-Project/CocosProject/assets/scripts/Interactable.ts"],"names":["_decorator","Component","ccclass","property","Interactable","_hasInteracted","canInteract","canInteractMultipleTimes","interact","player","onInteract","console","log","node","name","getInteractPrompt","interactPrompt","getInteractRange","interactRange","resetInteraction"],"mappings":";;;;;;;;;;;;;;;;AAGSA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;;;;;oFAHrB;AACA;;;;;OAGM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBH,U;;8BAGjBI,Y,WADZF,OAAO,CAAC,cAAD,C,2BAAR,MACaE,YADb,SACkCH,SADlC,CAC4C;AAAA;AAAA;;AAAA;;AAEJ;AAFI;;AAKF;AALE;;AAQS;AART,eAU9BI,cAV8B,GAUJ,KAVI;AAAA;;AAUG;;AAE3C;AACJ;AACA;AACA;AACWC,QAAAA,WAAW,GAAY;AAC1B,cAAI,CAAC,KAAKC,wBAAN,IAAkC,KAAKF,cAA3C,EAA2D;AACvD,mBAAO,KAAP;AACH;;AACD,iBAAO,IAAP;AACH;AAED;AACJ;AACA;AACA;;;AACWG,QAAAA,QAAQ,CAACC,MAAD,EAAqB;AAChC,cAAI,CAAC,KAAKH,WAAL,EAAL,EAAyB;AACrB;AACH;;AAED,eAAKD,cAAL,GAAsB,IAAtB;AACA,eAAKK,UAAL,CAAgBD,MAAhB;AACH;AAED;AACJ;AACA;AACA;;;AACcC,QAAAA,UAAU,CAACD,MAAD,EAAqB;AACrCE,UAAAA,OAAO,CAACC,GAAR,CAAa,kBAAiB,KAAKC,IAAL,CAAUC,IAAK,QAA7C;AACH;AAED;AACJ;AACA;;;AACWC,QAAAA,iBAAiB,GAAW;AAC/B,iBAAO,KAAKC,cAAZ;AACH;AAED;AACJ;AACA;;;AACWC,QAAAA,gBAAgB,GAAW;AAC9B,iBAAO,KAAKC,aAAZ;AACH;AAED;AACJ;AACA;;;AACWC,QAAAA,gBAAgB,GAAS;AAC5B,eAAKd,cAAL,GAAsB,KAAtB;AACH;;AA/DuC,O,gFACvCF,Q;;;;;iBAC8B,G;;yFAE9BA,Q;;;;;iBAC+B,I;;mGAE/BA,Q;;;;;iBAC0C,I","sourcesContent":["// 文件名: Interactable.ts\n// 功能：可交互物体基类（任务1.3）\n\nimport { _decorator, Component, Node } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('Interactable')\nexport class Interactable extends Component {\n    @property\n    public interactRange: number = 2.0; // 交互范围（米）\n\n    @property\n    public interactPrompt: string = \"交互\"; // 交互提示文本\n\n    @property\n    public canInteractMultipleTimes: boolean = true; // 是否可以多次交互\n\n    protected _hasInteracted: boolean = false; // 是否已经交互过\n\n    /**\n     * 检查是否可以交互\n     * @returns 是否可以交互\n     */\n    public canInteract(): boolean {\n        if (!this.canInteractMultipleTimes && this._hasInteracted) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * 执行交互（子类需要重写此方法）\n     * @param player 触发交互的玩家节点\n     */\n    public interact(player: Node): void {\n        if (!this.canInteract()) {\n            return;\n        }\n\n        this._hasInteracted = true;\n        this.onInteract(player);\n    }\n\n    /**\n     * 子类重写此方法实现具体交互逻辑\n     * @param player 触发交互的玩家节点\n     */\n    protected onInteract(player: Node): void {\n        console.log(`[Interactable] ${this.node.name} 被交互了！`);\n    }\n\n    /**\n     * 获取交互提示文本\n     */\n    public getInteractPrompt(): string {\n        return this.interactPrompt;\n    }\n\n    /**\n     * 获取交互范围\n     */\n    public getInteractRange(): number {\n        return this.interactRange;\n    }\n\n    /**\n     * 重置交互状态（用于可以多次交互的物体）\n     */\n    public resetInteraction(): void {\n        this._hasInteracted = false;\n    }\n}\n"]}