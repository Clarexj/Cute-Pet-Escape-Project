{"version":3,"sources":["file:///Users/clare/Desktop/%E5%89%8D%E5%93%A8AI%E5%B0%8F%E8%AF%BE/ClareProject/Cute-Pet-Escape-Project/CocosProject/assets/scripts/Board.ts"],"names":["_decorator","tween","Vec3","Quat","Interactable","PlayerController","ccclass","property","BoardState","Board","_state","STANDING","_initialRotation","start","node","getRotation","interactPrompt","canInteractMultipleTimes","canInteract","onInteract","player","console","log","playerController","getComponent","setMovementLocked","fallDown","FALLING","fallDir","fallDirection","clone","normalize","targetRotation","rotationAxis","Math","abs","z","x","set","angle","fromAxisAngle","PI","multiply","startRotation","rotation","to","fallDuration","easing","onUpdate","call","DOWN","onFallComplete","getState","reset","setRotation","resetInteraction","breakBoard","BROKEN"],"mappings":"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","sourcesContent":["// 文件名: Board.ts\n// 功能：木板交互（推倒木板，旋转90度倒下）\n\nimport { _decorator, Component, Node, tween, Vec3, Quat } from 'cc';\nimport { Interactable } from './Interactable';\nimport { PlayerController } from './PlayerController';\nconst { ccclass, property } = _decorator;\n\n/**\n * 木板状态\n */\nenum BoardState {\n    STANDING = 'standing',  // 直立\n    FALLING = 'falling',    // 倒下中\n    DOWN = 'down',          // 已倒下\n    BROKEN = 'broken'       // 已破碎（预留给追捕者交互）\n}\n\n@ccclass('Board')\nexport class Board extends Interactable {\n    @property\n    public fallDuration: number = 1.0; // 倒下动画时长（秒）\n\n    @property\n    public fallDirection: Vec3 = new Vec3(0, 0, 1); // 倒下方向（世界空间）\n\n    private _state: BoardState = BoardState.STANDING;\n    private _initialRotation: Quat = new Quat();\n\n    start() {\n        // 记录初始旋转\n        this.node.getRotation(this._initialRotation);\n\n        // 设置交互提示\n        this.interactPrompt = \"推倒木板\";\n        this.canInteractMultipleTimes = false; // 只能推倒一次\n    }\n\n    /**\n     * 检查是否可以交互\n     */\n    public canInteract(): boolean {\n        // 只有直立状态才能交互\n        return this._state === BoardState.STANDING && super.canInteract();\n    }\n\n    /**\n     * 执行交互：推倒木板\n     */\n    protected onInteract(player: Node): void {\n        if (this._state !== BoardState.STANDING) {\n            return;\n        }\n\n        console.log('[Board] 木板被推倒！');\n\n        // 锁定玩家移动\n        const playerController = player.getComponent(PlayerController);\n        if (playerController) {\n            playerController.setMovementLocked(true);\n        }\n\n        this.fallDown(playerController);\n    }\n\n    /**\n     * 木板倒下动画\n     */\n    private fallDown(playerController: PlayerController | null) {\n        this._state = BoardState.FALLING;\n\n        // 规范化倒下方向\n        const fallDir = this.fallDirection.clone().normalize();\n\n        // 计算倒下的目标旋转（绕X轴或Z轴旋转90度）\n        // 这里简化处理：假设木板绕X轴旋转\n        const targetRotation = new Quat();\n\n        // 根据倒下方向计算旋转轴\n        // 如果倒向+Z方向，绕X轴正向旋转90度\n        // 如果倒向-Z方向，绕X轴负向旋转90度\n        // 如果倒向+X方向，绕Z轴负向旋转90度\n        // 如果倒向-X方向，绕Z轴正向旋转90度\n\n        let rotationAxis = new Vec3();\n        if (Math.abs(fallDir.z) > Math.abs(fallDir.x)) {\n            // 主要沿Z轴倒下，绕X轴旋转\n            rotationAxis.set(1, 0, 0);\n            const angle = fallDir.z > 0 ? 90 : -90;\n            Quat.fromAxisAngle(targetRotation, rotationAxis, angle * Math.PI / 180);\n        } else {\n            // 主要沿X轴倒下，绕Z轴旋转\n            rotationAxis.set(0, 0, 1);\n            const angle = fallDir.x > 0 ? -90 : 90;\n            Quat.fromAxisAngle(targetRotation, rotationAxis, angle * Math.PI / 180);\n        }\n\n        // 组合初始旋转和倒下旋转\n        Quat.multiply(targetRotation, this._initialRotation, targetRotation);\n\n        // 使用tween动画实现平滑旋转\n        const startRotation = this.node.rotation.clone();\n\n        tween(this.node)\n            .to(this.fallDuration, {\n                rotation: targetRotation\n            }, {\n                easing: 'cubicOut', // 使用缓出效果，更自然\n                onUpdate: () => {\n                    // 可以在这里添加音效或粒子效果\n                }\n            })\n            .call(() => {\n                // 倒下完成\n                this._state = BoardState.DOWN;\n                console.log('[Board] 木板倒下完成');\n\n                // 解锁玩家移动\n                if (playerController) {\n                    playerController.setMovementLocked(false);\n                }\n\n                this.onFallComplete();\n            })\n            .start();\n    }\n\n    /**\n     * 倒下完成回调\n     */\n    private onFallComplete() {\n        // 可以在这里添加额外逻辑\n        // 例如：检查是否砸到追捕者，成为路障等\n    }\n\n    /**\n     * 获取当前状态\n     */\n    public getState(): BoardState {\n        return this._state;\n    }\n\n    /**\n     * 重置木板（用于测试）\n     */\n    public reset() {\n        this._state = BoardState.STANDING;\n        this.node.setRotation(this._initialRotation);\n        this.resetInteraction();\n    }\n\n    /**\n     * 追捕者踩碎木板（预留接口）\n     */\n    public breakBoard() {\n        if (this._state === BoardState.DOWN) {\n            this._state = BoardState.BROKEN;\n            // 可以添加破碎动画和销毁节点\n            console.log('[Board] 木板被踩碎');\n            // this.node.destroy(); // 暂不销毁，方便测试\n        }\n    }\n}\n"]}