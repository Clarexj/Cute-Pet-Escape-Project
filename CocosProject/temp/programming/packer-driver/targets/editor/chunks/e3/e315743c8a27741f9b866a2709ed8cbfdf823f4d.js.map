{"version":3,"sources":["file:///Users/clare/Desktop/%E5%89%8D%E5%93%A8AI%E5%B0%8F%E8%AF%BE/ClareProject/Cute-Pet-Escape-Project/CocosProject/assets/scripts/network/NetworkManager.ts"],"names":["_decorator","Component","director","ccclass","property","NetworkManager","_client","_room","_localSessionId","_eventCallbacks","Map","onLoad","_instance","console","warn","node","destroy","addPersistRootNode","log","start","Colyseus","Client","serverUrl","autoConnect","createRoom","getInstance","playerName","error","create","sessionId","roomId","setupRoomHandlers","emit","type","message","joinRoom","joinById","leaveRoom","leave","onStateChange","state","enableDebugLog","players","onAdd","player","onRemove","onChange","onMessage","onError","code","onLeave","sendPlayerMove","x","y","z","rotationY","isMoving","animationState","send","timestamp","Date","now","sendSetPlayerName","name","on","eventName","callback","has","set","get","push","off","callbacks","index","indexOf","splice","args","getRoom","getRoomId","getLocalSessionId","isConnected","getAllPlayers","getPlayerCount","size","onDestroy"],"mappings":"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","sourcesContent":["// 文件名: NetworkManager.ts\n// 功能: 网络管理器 - 连接Colyseus服务器（任务4.1）\n// 处理房间创建、加入、连接管理\n\n// 声明全局Colyseus对象（从colyseus.js插件）\ndeclare const Colyseus: any;\n\nimport { _decorator, Component, director } from 'cc';\nconst { ccclass, property } = _decorator;\n\n/**\n * 玩家数据接口\n */\nexport interface PlayerData {\n    sessionId: string;\n    name: string;\n    x: number;\n    y: number;\n    z: number;\n    rotationY: number;\n    isMoving: boolean;\n    animationState: string;\n    characterType: string;\n    timestamp: number;\n}\n\n/**\n * 房间状态接口\n */\nexport interface RoomState {\n    players: Map<string, PlayerData>;\n    roomId: string;\n    maxPlayers: number;\n    playerCount: number;\n    gameStarted: boolean;\n}\n\n/**\n * 网络事件回调类型\n */\nexport type NetworkEventCallback = (...args: any[]) => void;\n\n@ccclass('NetworkManager')\nexport class NetworkManager extends Component {\n    @property\n    public serverUrl: string = \"ws://localhost:2567\"; // 服务器地址\n\n    @property\n    public autoConnect: boolean = false; // 是否自动连接（调试用）\n\n    @property\n    public enableDebugLog: boolean = true; // 是否启用调试日志\n\n    // Colyseus客户端\n    private _client: Colyseus.Client | null = null;\n\n    // 当前房间\n    private _room: Colyseus.Room | null = null;\n\n    // 本地玩家会话ID\n    private _localSessionId: string = \"\";\n\n    // 事件回调\n    private _eventCallbacks: Map<string, NetworkEventCallback[]> = new Map();\n\n    // 单例模式\n    private static _instance: NetworkManager | null = null;\n\n    onLoad() {\n        // 实现单例模式\n        if (NetworkManager._instance) {\n            console.warn('[NetworkManager] 已存在实例，销毁当前节点');\n            this.node.destroy();\n            return;\n        }\n        NetworkManager._instance = this;\n\n        // 跨场景持久化（Cocos Creator 3.x API）\n        director.addPersistRootNode(this.node);\n\n        console.log('[NetworkManager] 网络管理器初始化，已设置为跨场景持久化');\n    }\n\n    start() {\n        console.log('[NetworkManager] 网络管理器初始化');\n\n        // 创建Colyseus客户端\n        this._client = new Colyseus.Client(this.serverUrl);\n\n        if (this.autoConnect) {\n            this.createRoom(\"TestPlayer\");\n        }\n    }\n\n    /**\n     * 获取单例实例\n     */\n    public static getInstance(): NetworkManager | null {\n        return NetworkManager._instance;\n    }\n\n    // ============ 房间管理 ============\n\n    /**\n     * 创建房间\n     */\n    public async createRoom(playerName: string): Promise<boolean> {\n        if (!this._client) {\n            console.error('[NetworkManager] 客户端未初始化');\n            return false;\n        }\n\n        try {\n            console.log('[NetworkManager] 创建房间...');\n\n            this._room = await this._client.create(\"game_room\", {\n                playerName: playerName\n            });\n\n            this._localSessionId = this._room.sessionId;\n\n            console.log(`[NetworkManager] 房间创建成功！房间ID: ${this._room.roomId}`);\n            console.log(`[NetworkManager] 本地玩家ID: ${this._localSessionId}`);\n\n            this.setupRoomHandlers();\n            this.emit('roomCreated', this._room.roomId);\n\n            return true;\n        } catch (error) {\n            console.error('[NetworkManager] 创建房间失败:', error);\n            this.emit('error', { type: 'createRoom', message: error.message });\n            return false;\n        }\n    }\n\n    /**\n     * 加入房间（通过房间ID）\n     */\n    public async joinRoom(roomId: string, playerName: string): Promise<boolean> {\n        if (!this._client) {\n            console.error('[NetworkManager] 客户端未初始化');\n            return false;\n        }\n\n        try {\n            console.log(`[NetworkManager] 加入房间: ${roomId}...`);\n\n            this._room = await this._client.joinById(roomId, {\n                playerName: playerName\n            });\n\n            this._localSessionId = this._room.sessionId;\n\n            console.log(`[NetworkManager] 成功加入房间！房间ID: ${this._room.roomId}`);\n            console.log(`[NetworkManager] 本地玩家ID: ${this._localSessionId}`);\n\n            this.setupRoomHandlers();\n            this.emit('roomJoined', this._room.roomId);\n\n            return true;\n        } catch (error) {\n            console.error('[NetworkManager] 加入房间失败:', error);\n            this.emit('error', { type: 'joinRoom', message: error.message });\n            return false;\n        }\n    }\n\n    /**\n     * 离开房间\n     */\n    public async leaveRoom(): Promise<void> {\n        if (!this._room) {\n            console.warn('[NetworkManager] 没有活跃的房间连接');\n            return;\n        }\n\n        try {\n            console.log('[NetworkManager] 离开房间...');\n            await this._room.leave();\n            this._room = null;\n            this._localSessionId = \"\";\n            this.emit('roomLeft');\n        } catch (error) {\n            console.error('[NetworkManager] 离开房间失败:', error);\n        }\n    }\n\n    /**\n     * 设置房间事件处理器\n     */\n    private setupRoomHandlers() {\n        if (!this._room) return;\n\n        // 监听状态变化\n        this._room.onStateChange((state: any) => {\n            if (this.enableDebugLog) {\n                console.log('[NetworkManager] 房间状态更新');\n            }\n            this.emit('stateChange', state);\n        });\n\n        // 监听玩家加入\n        this._room.state.players.onAdd((player: any, sessionId: string) => {\n            console.log(`[NetworkManager] 玩家加入: ${sessionId}`);\n            this.emit('playerAdded', { sessionId, player });\n        });\n\n        // 监听玩家离开\n        this._room.state.players.onRemove((player: any, sessionId: string) => {\n            console.log(`[NetworkManager] 玩家离开: ${sessionId}`);\n            this.emit('playerRemoved', { sessionId, player });\n        });\n\n        // 监听玩家属性变化\n        this._room.state.players.onChange((player: any, sessionId: string) => {\n            if (sessionId !== this._localSessionId) {\n                // 只处理远程玩家的变化\n                this.emit('playerChanged', { sessionId, player });\n            }\n        });\n\n        // 监听服务器消息\n        this._room.onMessage(\"welcome\", (message: any) => {\n            console.log('[NetworkManager] 收到欢迎消息:', message);\n            this.emit('welcome', message);\n        });\n\n        // 监听错误\n        this._room.onError((code: number, message: string) => {\n            console.error(`[NetworkManager] 房间错误 [${code}]: ${message}`);\n            this.emit('error', { type: 'room', code, message });\n        });\n\n        // 监听连接关闭\n        this._room.onLeave((code: number) => {\n            console.log(`[NetworkManager] 连接关闭 [${code}]`);\n            this.emit('disconnected', code);\n        });\n    }\n\n    // ============ 消息发送 ============\n\n    /**\n     * 发送玩家移动消息\n     */\n    public sendPlayerMove(x: number, y: number, z: number, rotationY: number, isMoving: boolean, animationState: string) {\n        if (!this._room) {\n            console.warn('[NetworkManager] 没有活跃的房间连接');\n            return;\n        }\n\n        this._room.send(\"playerMove\", {\n            x, y, z, rotationY, isMoving, animationState,\n            timestamp: Date.now()\n        });\n    }\n\n    /**\n     * 设置玩家名称\n     */\n    public sendSetPlayerName(name: string) {\n        if (!this._room) {\n            console.warn('[NetworkManager] 没有活跃的房间连接');\n            return;\n        }\n\n        this._room.send(\"setPlayerName\", name);\n    }\n\n    // ============ 事件系统 ============\n\n    /**\n     * 注册事件监听\n     */\n    public on(eventName: string, callback: NetworkEventCallback) {\n        if (!this._eventCallbacks.has(eventName)) {\n            this._eventCallbacks.set(eventName, []);\n        }\n        this._eventCallbacks.get(eventName)!.push(callback);\n    }\n\n    /**\n     * 取消事件监听\n     */\n    public off(eventName: string, callback: NetworkEventCallback) {\n        const callbacks = this._eventCallbacks.get(eventName);\n        if (!callbacks) return;\n\n        const index = callbacks.indexOf(callback);\n        if (index !== -1) {\n            callbacks.splice(index, 1);\n        }\n    }\n\n    /**\n     * 触发事件\n     */\n    private emit(eventName: string, ...args: any[]) {\n        const callbacks = this._eventCallbacks.get(eventName);\n        if (!callbacks) return;\n\n        for (const callback of callbacks) {\n            callback(...args);\n        }\n    }\n\n    // ============ 查询接口 ============\n\n    /**\n     * 获取当前房间\n     */\n    public getRoom(): Colyseus.Room | null {\n        return this._room;\n    }\n\n    /**\n     * 获取房间ID\n     */\n    public getRoomId(): string {\n        return this._room ? this._room.roomId : \"\";\n    }\n\n    /**\n     * 获取本地玩家会话ID\n     */\n    public getLocalSessionId(): string {\n        return this._localSessionId;\n    }\n\n    /**\n     * 是否已连接到房间\n     */\n    public isConnected(): boolean {\n        return this._room !== null;\n    }\n\n    /**\n     * 获取所有玩家数据\n     */\n    public getAllPlayers(): Map<string, PlayerData> {\n        if (!this._room) return new Map();\n        return this._room.state.players;\n    }\n\n    /**\n     * 获取玩家数量\n     */\n    public getPlayerCount(): number {\n        if (!this._room) return 0;\n        return this._room.state.players.size;\n    }\n\n    onDestroy() {\n        // 离开房间\n        if (this._room) {\n            this._room.leave();\n        }\n\n        // 清理单例\n        if (NetworkManager._instance === this) {\n            NetworkManager._instance = null;\n        }\n    }\n}\n"]}