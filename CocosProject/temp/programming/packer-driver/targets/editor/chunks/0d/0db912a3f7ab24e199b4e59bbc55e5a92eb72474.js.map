{"version":3,"sources":["file:///Users/clare/Desktop/%E5%89%8D%E5%93%A8AI%E5%B0%8F%E8%AF%BE/ClareProject/Cute-Pet-Escape-Project/CocosProject/assets/scripts/Hunter.ts"],"names":["_decorator","Component","Vec3","BoxCollider","CharacterState","ccclass","property","Hunter","_carriedSurvivor","_nearestCage","_tempVec3_1","_tempVec3_2","start","console","log","collider","node","getComponent","on","onTriggerEnter","onTriggerStay","onTriggerExit","update","deltaTime","checkNearCage","autoCatchEnabled","autoDetectSurvivors","event","otherNode","otherCollider","characterState","isNormal","catchSurvivor","name","includes","playerController","getCurrentRescueTarget","rescueTarget","cancelRescue","allSurvivors","scene","getComponentsInChildren","nearestSurvivor","nearestDistance","catchRange","getWorldPosition","survivor","subtract","distance","length","survivorNode","warn","error","setCaught","setParent","setPosition","allNodes","children","nearestCage","sceneNode","hangSurvivorOnCage","cageNode","setHanged","manualCatch","manualHang","getCarriedSurvivor","isCarrying"],"mappings":"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","sourcesContent":["// 文件名: Hunter.ts\n// 功能：追捕者原型（任务2.1）\n// 简化版追捕者，用于测试抓捕和挂起逻辑\n\nimport { _decorator, Component, Node, Vec3, BoxCollider, ITriggerEvent } from 'cc';\nimport { CharacterState, CharacterStateType } from './CharacterState';\nconst { ccclass, property } = _decorator;\n\n@ccclass('Hunter')\nexport class Hunter extends Component {\n    @property\n    public moveSpeed: number = 5.75; // 移动速度（115% = 5 * 1.15）\n\n    @property\n    public catchRange: number = 1.5; // 抓捕范围（米）\n\n    @property\n    public autoCatchEnabled: boolean = true; // 是否自动抓捕（用于测试）\n\n    private _carriedSurvivor: Node | null = null; // 携带的逃生者\n    private _nearestCage: Node | null = null; // 最近的笼子\n\n    // 临时变量\n    private _tempVec3_1: Vec3 = new Vec3();\n    private _tempVec3_2: Vec3 = new Vec3();\n\n    start() {\n        console.log('[Hunter] 追捕者初始化');\n\n        // 设置碰撞检测（如果有BoxCollider）\n        const collider = this.node.getComponent(BoxCollider);\n        if (collider) {\n            collider.on('onTriggerEnter', this.onTriggerEnter, this);\n            collider.on('onTriggerStay', this.onTriggerStay, this);\n            collider.on('onTriggerExit', this.onTriggerExit, this);\n        }\n    }\n\n    update(deltaTime: number) {\n        // 如果携带了逃生者，检测是否靠近笼子\n        if (this._carriedSurvivor) {\n            this.checkNearCage();\n        }\n\n        // 如果启用自动抓捕，检测附近的逃生者\n        if (this.autoCatchEnabled && !this._carriedSurvivor) {\n            this.autoDetectSurvivors();\n        }\n    }\n\n    // ============ 碰撞检测 ============\n\n    /**\n     * 碰撞进入\n     */\n    private onTriggerEnter(event: ITriggerEvent) {\n        const otherNode = event.otherCollider.node;\n\n        // 检查是否是逃生者\n        const characterState = otherNode.getComponent(CharacterState);\n        if (characterState && characterState.isNormal() && !this._carriedSurvivor) {\n            this.catchSurvivor(otherNode);\n        }\n\n        // 检查是否是笼子\n        if (otherNode.name.includes('Cage') || otherNode.name.includes('cage')) {\n            this._nearestCage = otherNode;\n        }\n    }\n\n    /**\n     * 碰撞持续\n     */\n    private onTriggerStay(event: ITriggerEvent) {\n        const otherNode = event.otherCollider.node;\n\n        // 检查是否碰到正在救援的逃生者，打断救援\n        const characterState = otherNode.getComponent(CharacterState);\n        if (characterState && characterState.isNormal()) {\n            // 检查这个逃生者是否正在救援别人\n            const playerController = otherNode.getComponent('PlayerController');\n            if (playerController && typeof playerController.getCurrentRescueTarget === 'function') {\n                const rescueTarget = playerController.getCurrentRescueTarget();\n                if (rescueTarget) {\n                    // 正在救援，打断救援并抓捕\n                    console.log(`[Hunter] 打断 ${otherNode.name} 的救援行为`);\n                    playerController.cancelRescue();\n\n                    // 如果还没携带逃生者，抓捕这个救援者\n                    if (!this._carriedSurvivor) {\n                        this.catchSurvivor(otherNode);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * 碰撞退出\n     */\n    private onTriggerExit(event: ITriggerEvent) {\n        const otherNode = event.otherCollider.node;\n\n        // 离开笼子范围\n        if (otherNode === this._nearestCage) {\n            this._nearestCage = null;\n        }\n    }\n\n    // ============ 抓捕逻辑 ============\n\n    /**\n     * 自动检测附近的逃生者（简化版AI）\n     */\n    private autoDetectSurvivors() {\n        // 查找所有逃生者\n        const allSurvivors = this.node.scene.getComponentsInChildren(CharacterState);\n\n        let nearestSurvivor: Node | null = null;\n        let nearestDistance = this.catchRange;\n\n        this.node.getWorldPosition(this._tempVec3_1);\n\n        for (const survivor of allSurvivors) {\n            // 跳过非正常状态的逃生者\n            if (!survivor.isNormal()) continue;\n\n            survivor.node.getWorldPosition(this._tempVec3_2);\n            Vec3.subtract(this._tempVec3_2, this._tempVec3_2, this._tempVec3_1);\n            const distance = this._tempVec3_2.length();\n\n            if (distance <= nearestDistance) {\n                nearestDistance = distance;\n                nearestSurvivor = survivor.node;\n            }\n        }\n\n        // 如果找到附近的逃生者，抓捕\n        if (nearestSurvivor) {\n            this.catchSurvivor(nearestSurvivor);\n        }\n    }\n\n    /**\n     * 抓捕逃生者\n     */\n    public catchSurvivor(survivorNode: Node) {\n        if (this._carriedSurvivor) {\n            console.warn('[Hunter] 已经携带了一个逃生者，无法再次抓捕');\n            return;\n        }\n\n        const characterState = survivorNode.getComponent(CharacterState);\n        if (!characterState) {\n            console.error('[Hunter] 目标节点没有CharacterState组件');\n            return;\n        }\n\n        if (!characterState.isNormal()) {\n            console.warn(`[Hunter] ${survivorNode.name} 不是正常状态，无法抓捕`);\n            return;\n        }\n\n        // 设置逃生者状态为被抓\n        characterState.setCaught(this.node);\n        this._carriedSurvivor = survivorNode;\n\n        console.log(`[Hunter] 抓住了 ${survivorNode.name}`);\n\n        // 将逃生者设置为追捕者的子节点（视觉上跟随）\n        survivorNode.setParent(this.node);\n        survivorNode.setPosition(0, 2, 0); // 放在追捕者上方\n    }\n\n    /**\n     * 检测是否靠近笼子\n     */\n    private checkNearCage() {\n        if (!this._carriedSurvivor) return;\n\n        // 查找场景中的笼子\n        const allNodes = this.node.scene.children;\n        let nearestCage: Node | null = null;\n        let nearestDistance = 2.0; // 笼子检测范围\n\n        this.node.getWorldPosition(this._tempVec3_1);\n\n        for (const sceneNode of allNodes) {\n            if (sceneNode.name.includes('Cage') || sceneNode.name.includes('cage')) {\n                sceneNode.getWorldPosition(this._tempVec3_2);\n                Vec3.subtract(this._tempVec3_2, this._tempVec3_2, this._tempVec3_1);\n                const distance = this._tempVec3_2.length();\n\n                if (distance <= nearestDistance) {\n                    nearestDistance = distance;\n                    nearestCage = sceneNode;\n                }\n            }\n        }\n\n        // 如果靠近笼子，挂起逃生者\n        if (nearestCage) {\n            this.hangSurvivorOnCage(nearestCage);\n        }\n    }\n\n    /**\n     * 将逃生者挂在笼子上\n     */\n    private hangSurvivorOnCage(cageNode: Node) {\n        if (!this._carriedSurvivor) return;\n\n        const characterState = this._carriedSurvivor.getComponent(CharacterState);\n        if (!characterState) return;\n\n        console.log(`[Hunter] 将 ${this._carriedSurvivor.name} 挂在 ${cageNode.name} 上`);\n\n        // 设置逃生者状态为被挂起\n        characterState.setHanged();\n\n        // 将逃生者设置为笼子的子节点\n        this._carriedSurvivor.setParent(cageNode);\n        this._carriedSurvivor.setPosition(0, 1.5, 0); // 笼子上方\n\n        // 清除携带引用\n        this._carriedSurvivor = null;\n    }\n\n    // ============ 手动控制接口（用于测试） ============\n\n    /**\n     * 手动触发抓捕（用于测试）\n     */\n    public manualCatch(survivorNode: Node) {\n        this.catchSurvivor(survivorNode);\n    }\n\n    /**\n     * 手动触发挂起（用于测试）\n     */\n    public manualHang(cageNode: Node) {\n        if (this._carriedSurvivor) {\n            this.hangSurvivorOnCage(cageNode);\n        } else {\n            console.warn('[Hunter] 没有携带逃生者，无法挂起');\n        }\n    }\n\n    /**\n     * 获取携带的逃生者\n     */\n    public getCarriedSurvivor(): Node | null {\n        return this._carriedSurvivor;\n    }\n\n    /**\n     * 是否正在携带逃生者\n     */\n    public isCarrying(): boolean {\n        return this._carriedSurvivor !== null;\n    }\n}\n"]}