{"version":3,"sources":["file:///Users/clare/Desktop/%E5%89%8D%E5%93%A8AI%E5%B0%8F%E8%AF%BE/ClareProject/Cute-Pet-Escape-Project/CocosProject/assets/scripts/CharacterAnimationController.ts"],"names":["_decorator","Component","AnimationComponent","AnimationClip","ccclass","property","AnimationState","CharacterType","CharacterAnimationController","type","_currentState","IDLE","_isAttacking","start","autoFindAnimation","animationComponent","node","getComponent","console","error","idleClip","warn","runClip","attackClip","characterType","HUNTER","attackAnimationDuration","duration","log","toFixed","playIdle","crossFadeToClip","playRun","RUN","playAttack","ATTACK","crossFade","name","crossFadeDuration","scheduleOnce","updateMovementAnimation","isMoving","clip","clipName","getCurrentState","isAttacking","isPlaying","state","getAnimationInfo","forceSetState","SURVIVOR"],"mappings":"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","sourcesContent":["// 文件名: CharacterAnimationController.ts\n// 功能：角色动画控制器（任务3.1）\n// 支持逃生者和追捕者的动画状态管理\n\nimport { _decorator, Component, Node, AnimationComponent, AnimationClip } from 'cc';\nconst { ccclass, property } = _decorator;\n\n/**\n * 动画状态枚举\n */\nexport enum AnimationState {\n    IDLE = 'idle',       // 待机\n    RUN = 'run',         // 跑步\n    ATTACK = 'attack'    // 攻击（仅追捕者）\n}\n\n/**\n * 角色类型枚举\n */\nexport enum CharacterType {\n    SURVIVOR = 'survivor',  // 逃生者\n    HUNTER = 'hunter'       // 追捕者\n}\n\n@ccclass('CharacterAnimationController')\nexport class CharacterAnimationController extends Component {\n    @property({ type: AnimationComponent })\n    public animationComponent: AnimationComponent | null = null; // 动画组件引用\n\n    @property({ type: AnimationClip })\n    public idleClip: AnimationClip | null = null; // idle动画剪辑\n\n    @property({ type: AnimationClip })\n    public runClip: AnimationClip | null = null; // run动画剪辑\n\n    @property({ type: AnimationClip })\n    public attackClip: AnimationClip | null = null; // attack动画剪辑（可选，追捕者用）\n\n    @property\n    public characterType: CharacterType = CharacterType.SURVIVOR; // 角色类型\n\n    @property\n    public crossFadeDuration: number = 0.2; // 动画过渡时长（秒）\n\n    @property\n    public attackAnimationDuration: number = 1.0; // 攻击动画时长（秒）\n\n    @property\n    public autoFindAnimation: boolean = true; // 自动查找动画组件\n\n    private _currentState: AnimationState = AnimationState.IDLE; // 当前动画状态\n    private _isAttacking: boolean = false; // 是否正在攻击中\n\n    start() {\n        // 自动查找动画组件\n        if (this.autoFindAnimation && !this.animationComponent) {\n            this.animationComponent = this.node.getComponent(AnimationComponent);\n            if (!this.animationComponent) {\n                console.error('[CharacterAnimationController] 未找到AnimationComponent组件！');\n                return;\n            }\n        }\n\n        // 验证必需的动画剪辑\n        if (!this.idleClip) {\n            console.warn('[CharacterAnimationController] 缺少idle动画剪辑！');\n        }\n        if (!this.runClip) {\n            console.warn('[CharacterAnimationController] 缺少run动画剪辑！');\n        }\n\n        // ✅ 任务3.1 Bug修复：自动获取攻击动画时长\n        if (this.attackClip && this.characterType === CharacterType.HUNTER) {\n            this.attackAnimationDuration = this.attackClip.duration;\n            console.log(`[CharacterAnimationController] 自动检测攻击动画时长：${this.attackAnimationDuration.toFixed(2)}s`);\n        }\n\n        // 播放初始动画\n        this.playIdle();\n\n        console.log(`[CharacterAnimationController] ${this.characterType} 动画控制器初始化完成`);\n    }\n\n    // ============ 动画播放接口 ============\n\n    /**\n     * 播放待机动画\n     */\n    public playIdle() {\n        if (this._isAttacking) return; // 攻击中不切换\n\n        if (this._currentState === AnimationState.IDLE) return; // 已经是待机状态\n\n        this._currentState = AnimationState.IDLE;\n        this.crossFadeToClip(this.idleClip, 'idle');\n    }\n\n    /**\n     * 播放跑步动画\n     */\n    public playRun() {\n        if (this._isAttacking) return; // 攻击中不切换\n\n        if (this._currentState === AnimationState.RUN) return; // 已经是跑步状态\n\n        this._currentState = AnimationState.RUN;\n        this.crossFadeToClip(this.runClip, 'run');\n    }\n\n    /**\n     * 播放攻击动画（仅追捕者）\n     */\n    public playAttack() {\n        if (this.characterType !== CharacterType.HUNTER) {\n            console.warn('[CharacterAnimationController] 只有追捕者才能播放攻击动画');\n            return;\n        }\n\n        if (!this.attackClip) {\n            console.error('[CharacterAnimationController] 缺少attack动画剪辑！');\n            return;\n        }\n\n        if (this._isAttacking) {\n            console.log('[CharacterAnimationController] 攻击动画正在播放中，跳过');\n            return;\n        }\n\n        console.log('[CharacterAnimationController] 播放攻击动画');\n\n        this._isAttacking = true;\n        this._currentState = AnimationState.ATTACK;\n\n        // 播放攻击动画（不循环）\n        if (this.animationComponent) {\n            this.animationComponent.crossFade(this.attackClip.name, this.crossFadeDuration);\n\n            // 攻击动画播放完后自动切换回待机\n            this.scheduleOnce(() => {\n                this._isAttacking = false;\n                this.playIdle();\n            }, this.attackAnimationDuration);\n        }\n    }\n\n    /**\n     * 根据移动状态自动切换动画\n     * @param isMoving 是否正在移动\n     */\n    public updateMovementAnimation(isMoving: boolean) {\n        if (isMoving) {\n            this.playRun();\n        } else {\n            this.playIdle();\n        }\n    }\n\n    // ============ 内部方法 ============\n\n    /**\n     * 交叉淡入淡出到指定动画剪辑\n     */\n    private crossFadeToClip(clip: AnimationClip | null, clipName: string) {\n        if (!this.animationComponent) {\n            console.error('[CharacterAnimationController] animationComponent未绑定！');\n            return;\n        }\n\n        if (!clip) {\n            console.error(`[CharacterAnimationController] ${clipName}动画剪辑未绑定！`);\n            return;\n        }\n\n        // 使用crossFade实现平滑过渡\n        this.animationComponent.crossFade(clip.name, this.crossFadeDuration);\n\n        // console.log(`[CharacterAnimationController] 切换到 ${clipName} 动画`);\n    }\n\n    // ============ 查询接口 ============\n\n    /**\n     * 获取当前动画状态\n     */\n    public getCurrentState(): AnimationState {\n        return this._currentState;\n    }\n\n    /**\n     * 是否正在攻击中\n     */\n    public isAttacking(): boolean {\n        return this._isAttacking;\n    }\n\n    /**\n     * 是否正在播放指定动画\n     */\n    public isPlaying(state: AnimationState): boolean {\n        return this._currentState === state;\n    }\n\n    // ============ 调试功能 ============\n\n    /**\n     * 获取动画状态信息（调试用）\n     */\n    public getAnimationInfo(): string {\n        return `状态:${this._currentState}, 攻击中:${this._isAttacking}, 类型:${this.characterType}`;\n    }\n\n    /**\n     * 强制切换到指定状态（调试用）\n     */\n    public forceSetState(state: AnimationState) {\n        this._currentState = state;\n\n        switch (state) {\n            case AnimationState.IDLE:\n                this.crossFadeToClip(this.idleClip, 'idle');\n                break;\n            case AnimationState.RUN:\n                this.crossFadeToClip(this.runClip, 'run');\n                break;\n            case AnimationState.ATTACK:\n                if (this.attackClip) {\n                    this.crossFadeToClip(this.attackClip, 'attack');\n                }\n                break;\n        }\n    }\n}\n"]}