{"version":3,"sources":["file:///Users/clare/Desktop/%E5%89%8D%E5%93%A8AI%E5%B0%8F%E8%AF%BE/ClareProject/Cute-Pet-Escape-Project/CocosProject/assets/scripts/PlayerController.ts"],"names":["_decorator","Component","Node","Vec3","Quat","Joystick","ccclass","property","PlayerController","_moveDirection","_targetRotation","update","deltaTime","joystick","cameraNode","joyDir","getDirection","joyStrength","getStrength","calculateMoveDirection","movement","clone","multiplyScalar","moveSpeed","currentPos","node","position","add","setPosition","rotateTowardsMovement","cameraForward","cameraRight","getWorldRotation","getAxisZ","negative","getAxisX","y","normalize","set","x","lengthSqr","targetEuler","Math","atan2","z","PI","fromEuler","currentRotation","rotation","slerp","rotationSpeed","setRotation","setMoveSpeed","speed","getMoveDirection","isMoving","isActive"],"mappings":"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","sourcesContent":["// 文件名: PlayerController.ts\n// 功能：逃生者角色移动控制（基于Transform，相对摄像机方向）\n\nimport { _decorator, Component, Node, Vec3, Quat } from 'cc';\nimport { Joystick } from './Joystick';\nconst { ccclass, property } = _decorator;\n\n@ccclass('PlayerController')\nexport class PlayerController extends Component {\n    @property(Joystick)\n    public joystick: Joystick = null!; // 虚拟摇杆引用\n\n    @property(Node)\n    public cameraNode: Node = null!; // 摄像机节点引用\n\n    @property\n    public moveSpeed: number = 5.0; // 移动速度（单位/秒），逃生者基础速度100%\n\n    @property\n    public rotationSpeed: number = 10.0; // 转身速度\n\n    private _moveDirection: Vec3 = new Vec3(); // 世界空间移动方向\n    private _targetRotation: Quat = new Quat(); // 目标旋转\n\n    update(deltaTime: number) {\n        if (!this.joystick || !this.cameraNode) return;\n\n        // 获取摇杆输入\n        const joyDir = this.joystick.getDirection();\n        const joyStrength = this.joystick.getStrength();\n\n        if (joyStrength > 0.01) {\n            // 计算相对于摄像机的移动方向\n            this.calculateMoveDirection(joyDir);\n\n            // 移动角色\n            const movement = this._moveDirection.clone().multiplyScalar(this.moveSpeed * joyStrength * deltaTime);\n            const currentPos = this.node.position.clone();\n            currentPos.add(movement);\n            this.node.setPosition(currentPos);\n\n            // 旋转角色面向移动方向\n            this.rotateTowardsMovement(deltaTime);\n        }\n    }\n\n    /**\n     * 计算相对于摄像机的移动方向\n     * @param joyDir 摇杆输入方向（2D）\n     */\n    private calculateMoveDirection(joyDir: Vec3 | { x: number; y: number }) {\n        // 获取摄像机的前方和右方向（世界空间）\n        const cameraForward = new Vec3();\n        const cameraRight = new Vec3();\n\n        // 摄像机的前方向\n        this.cameraNode.getWorldRotation(new Quat()).getAxisZ(cameraForward);\n        cameraForward.negative(); // Cocos中Z轴负方向是前方\n\n        // 摄像机的右方向\n        this.cameraNode.getWorldRotation(new Quat()).getAxisX(cameraRight);\n\n        // 将前方和右方向投影到水平面（Y=0）\n        cameraForward.y = 0;\n        cameraForward.normalize();\n\n        cameraRight.y = 0;\n        cameraRight.normalize();\n\n        // 组合摇杆输入和摄像机方向\n        // 摇杆Y对应前后，摇杆X对应左右\n        this._moveDirection.set(0, 0, 0);\n        this._moveDirection.add(cameraForward.multiplyScalar(joyDir.y)); // 前后\n        this._moveDirection.add(cameraRight.multiplyScalar(joyDir.x));   // 左右\n        this._moveDirection.normalize();\n    }\n\n    /**\n     * 平滑旋转角色面向移动方向\n     */\n    private rotateTowardsMovement(deltaTime: number) {\n        if (this._moveDirection.lengthSqr() < 0.01) return;\n\n        // 计算目标旋转（朝向移动方向）\n        const targetEuler = new Vec3();\n        targetEuler.y = Math.atan2(this._moveDirection.x, this._moveDirection.z) * (180 / Math.PI);\n\n        Quat.fromEuler(this._targetRotation, 0, targetEuler.y, 0);\n\n        // 平滑插值到目标旋转\n        const currentRotation = this.node.rotation.clone();\n        Quat.slerp(currentRotation, currentRotation, this._targetRotation, this.rotationSpeed * deltaTime);\n        this.node.setRotation(currentRotation);\n    }\n\n    /**\n     * 设置移动速度（用于后续追捕者115%速度）\n     */\n    public setMoveSpeed(speed: number) {\n        this.moveSpeed = speed;\n    }\n\n    /**\n     * 获取当前移动方向（用于动画系统）\n     */\n    public getMoveDirection(): Vec3 {\n        return this._moveDirection.clone();\n    }\n\n    /**\n     * 是否正在移动\n     */\n    public isMoving(): boolean {\n        return this.joystick.isActive() && this.joystick.getStrength() > 0.01;\n    }\n}\n"]}