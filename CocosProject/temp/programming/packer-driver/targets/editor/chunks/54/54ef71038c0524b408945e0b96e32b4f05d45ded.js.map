{"version":3,"sources":["file:///Users/clare/Desktop/%E5%89%8D%E5%93%A8AI%E5%B0%8F%E8%AF%BE/ClareProject/Cute-Pet-Escape-Project/CocosProject/assets/scripts/PlayerController.ts"],"names":["_decorator","Component","Node","Vec2","Vec3","Quat","Joystick","Interactable","CharacterState","CharacterAnimationController","ccclass","property","PlayerController","_moveDirection","_targetRotation","_currentInteractable","_interactionCallbacks","_isInteracting","_characterState","_currentRescueTarget","_rescueCallbacks","_allInteractables","_allCharacters","_tempVec2","_tempVec3_1","_tempVec3_2","_tempVec3_3","_tempQuat","_cameraForward","_cameraRight","_rayOrigin","_rayDirection","start","joystick","console","error","cameraNode","node","getComponent","refreshInteractablesCache","refreshCharactersCache","animationController","getComponentInChildren","warn","update","deltaTime","isNormal","getDirectionOut","joyStrength","getStrength","calculateMoveDirection","multiplyScalar","moveSpeed","getPosition","add","setPosition","rotateTowardsMovement","set","detectInteractables","detectRescueTargets","updateAnimation","isMoving","updateMovementAnimation","joyDir","getWorldRotation","transformQuat","y","normalize","x","lengthSqr","targetY","Math","atan2","z","PI","fromEuler","getRotation","slerp","rotationSpeed","setRotation","setMoveSpeed","speed","getMoveDirection","clone","isActive","scene","getComponentsInChildren","log","length","closestInteractable","closestDistance","interactDistance","getWorldPosition","interactable","canInteract","subtract","distance","range","min","getInteractRange","notifyInteractionChange","triggerInteraction","interact","name","getCurrentInteractable","onInteractionChange","callback","push","setMovementLocked","locked","playIdle","isInteracting","nearestTarget","nearestDistance","rescueDistance","character","canBeRescued","notifyRescueTargetChange","triggerRescue","targetState","success","startRescue","cancelRescue","getCurrentRescueTarget","onRescueTargetChange","getCharacterState"],"mappings":"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","sourcesContent":["// 文件名: PlayerController.ts\n// 功能：逃生者角色移动控制（基于Transform，相对摄像机方向）+ 交互检测 + 救援系统\n// 版本：V1.4 - 新增动画控制（任务3.1）\n\nimport { _decorator, Component, Node, Vec2, Vec3, Quat, PhysicsSystem, geometry } from 'cc';\nimport { Joystick } from './Joystick';\nimport { Interactable } from './Interactable';\nimport { CharacterState, CharacterStateType } from './CharacterState';\nimport { CharacterAnimationController } from './CharacterAnimationController';\nconst { ccclass, property } = _decorator;\n\n@ccclass('PlayerController')\nexport class PlayerController extends Component {\n    @property(Joystick)\n    public joystick: Joystick = null!; // 虚拟摇杆引用\n\n    @property(Node)\n    public cameraNode: Node = null!; // 摄像机节点引用\n\n    @property\n    public moveSpeed: number = 5.0; // 移动速度（单位/秒），逃生者基础速度100%\n\n    @property\n    public rotationSpeed: number = 10.0; // 转身速度\n\n    @property\n    public interactDistance: number = 2.5; // 交互检测距离（米）\n\n    @property\n    public rescueDistance: number = 2.0; // 救援检测距离（米）\n\n    @property(CharacterAnimationController)\n    public animationController: CharacterAnimationController | null = null; // 动画控制器（任务3.1新增）\n\n    private _moveDirection: Vec3 = new Vec3(); // 世界空间移动方向\n    private _targetRotation: Quat = new Quat(); // 目标旋转\n\n    // 任务1.3新增：交互系统\n    private _currentInteractable: Interactable | null = null; // 当前可交互的物体\n    private _interactionCallbacks: ((interactable: Interactable | null) => void)[] = []; // 交互状态变化回调\n    private _isInteracting: boolean = false; // 是否正在交互中（锁定移动）\n\n    // 任务2.1新增：角色状态和救援系统\n    private _characterState: CharacterState | null = null; // 角色状态组件\n    private _currentRescueTarget: Node | null = null; // 当前救援目标\n    private _rescueCallbacks: ((target: Node | null) => void)[] = []; // 救援目标变化回调\n\n    // 性能优化：缓存场景中的可交互物体和角色\n    private _allInteractables: Interactable[] = []; // 缓存所有可交互物体\n    private _allCharacters: CharacterState[] = []; // 缓存所有角色\n\n    // 性能优化：复用临时变量\n    private _tempVec2: Vec2 = new Vec2(); // 用于接收摇杆方向\n    private _tempVec3_1: Vec3 = new Vec3();\n    private _tempVec3_2: Vec3 = new Vec3();\n    private _tempVec3_3: Vec3 = new Vec3();\n    private _tempQuat: Quat = new Quat();\n    private _cameraForward: Vec3 = new Vec3();\n    private _cameraRight: Vec3 = new Vec3();\n    private _rayOrigin: Vec3 = new Vec3();\n    private _rayDirection: Vec3 = new Vec3();\n\n    start() {\n        // 检查必需的引用\n        if (!this.joystick) {\n            console.error('[PlayerController] joystick未绑定！');\n        }\n        if (!this.cameraNode) {\n            console.error('[PlayerController] cameraNode未绑定！');\n        }\n\n        // 获取角色状态组件\n        this._characterState = this.node.getComponent(CharacterState);\n        if (!this._characterState) {\n            console.error('[PlayerController] CharacterState组件未找到！');\n        }\n\n        // ✅ 性能优化：在启动时缓存场景中的可交互物体和角色\n        this.refreshInteractablesCache();\n        this.refreshCharactersCache();\n\n        // ✅ 任务3.1新增：获取动画控制器\n        if (!this.animationController) {\n            this.animationController = this.node.getComponentInChildren(CharacterAnimationController);\n            if (!this.animationController) {\n                console.warn('[PlayerController] CharacterAnimationController未找到，动画功能将不可用');\n            }\n        }\n    }\n\n    update(deltaTime: number) {\n        if (!this.joystick || !this.cameraNode || !this._characterState) return;\n\n        // 任务2.1：只有正常状态才能移动\n        if (!this._characterState.isNormal()) {\n            return;\n        }\n\n        // 如果正在交互中，禁止移动\n        if (this._isInteracting) {\n            return;\n        }\n\n        // ✅ 优化：获取摇杆输入（复用Vec2对象，避免GC）\n        this.joystick.getDirectionOut(this._tempVec2);\n        const joyStrength = this.joystick.getStrength();\n\n        if (joyStrength > 0.01) {\n            // 计算相对于摄像机的移动方向\n            this.calculateMoveDirection(this._tempVec2);\n\n            // 移动角色（复用对象）\n            Vec3.multiplyScalar(this._tempVec3_1, this._moveDirection, this.moveSpeed * joyStrength * deltaTime);\n            this.node.getPosition(this._tempVec3_2);\n            Vec3.add(this._tempVec3_2, this._tempVec3_2, this._tempVec3_1);\n            this.node.setPosition(this._tempVec3_2);\n\n            // 旋转角色面向移动方向\n            this.rotateTowardsMovement(deltaTime);\n        } else {\n            // ✅ 修复：摇杆松开时重置移动方向\n            this._moveDirection.set(0, 0, 0);\n        }\n\n        // 任务1.3新增：检测附近可交互物体\n        this.detectInteractables();\n\n        // 任务2.1新增：检测附近可救援的队友\n        this.detectRescueTargets();\n\n        // ✅ 任务3.1新增：更新动画状态\n        this.updateAnimation();\n    }\n\n    /**\n     * 更新动画状态（任务3.1新增）\n     */\n    private updateAnimation() {\n        if (!this.animationController) return;\n\n        // 根据移动状态自动切换动画\n        const isMoving = this.isMoving();\n        this.animationController.updateMovementAnimation(isMoving);\n    }\n\n    /**\n     * 计算相对于摄像机的移动方向\n     * @param joyDir 摇杆输入方向（2D）\n     */\n    private calculateMoveDirection(joyDir: Vec3 | { x: number; y: number }) {\n        // 获取摄像机的世界旋转\n        this.cameraNode.getWorldRotation(this._tempQuat);\n\n        // ✅ 修复：使用Vec3.transformQuat转换标准向量（避免二次取负）\n        // Cocos Creator标准坐标系：Z轴负方向是前方，X轴正方向是右方\n        this._tempVec3_3.set(0, 0, -1); // 标准Forward向量\n        Vec3.transformQuat(this._cameraForward, this._tempVec3_3, this._tempQuat);\n\n        this._tempVec3_3.set(1, 0, 0); // 标准Right向量\n        Vec3.transformQuat(this._cameraRight, this._tempVec3_3, this._tempQuat);\n\n        // 将前方和右方向投影到水平面（Y=0）\n        this._cameraForward.y = 0;\n        this._cameraForward.normalize();\n\n        this._cameraRight.y = 0;\n        this._cameraRight.normalize();\n\n        // 组合摇杆输入和摄像机方向\n        // 注意坐标系映射：\n        //   - 摇杆Y轴（UI向上=正）→ 世界前后方向（摄像机Forward）\n        //   - 摇杆X轴（UI向右=正）→ 世界左右方向（摄像机Right）\n        Vec3.multiplyScalar(this._tempVec3_1, this._cameraForward, joyDir.y);\n        Vec3.multiplyScalar(this._tempVec3_2, this._cameraRight, joyDir.x);\n        Vec3.add(this._moveDirection, this._tempVec3_1, this._tempVec3_2);\n        this._moveDirection.normalize();\n    }\n\n    /**\n     * 平滑旋转角色面向移动方向\n     */\n    private rotateTowardsMovement(deltaTime: number) {\n        if (this._moveDirection.lengthSqr() < 0.01) return;\n\n        // 计算目标旋转（朝向移动方向）\n        const targetY = Math.atan2(this._moveDirection.x, this._moveDirection.z) * (180 / Math.PI);\n        Quat.fromEuler(this._targetRotation, 0, targetY, 0);\n\n        // 平滑插值到目标旋转（复用对象）\n        this.node.getRotation(this._tempQuat);\n        Quat.slerp(this._tempQuat, this._tempQuat, this._targetRotation, this.rotationSpeed * deltaTime);\n        this.node.setRotation(this._tempQuat);\n    }\n\n    /**\n     * 设置移动速度（用于后续追捕者115%速度）\n     */\n    public setMoveSpeed(speed: number) {\n        this.moveSpeed = speed;\n    }\n\n    /**\n     * 获取当前移动方向（用于动画系统）\n     */\n    public getMoveDirection(): Vec3 {\n        return this._moveDirection.clone();\n    }\n\n    /**\n     * 是否正在移动\n     */\n    public isMoving(): boolean {\n        return this.joystick && this.joystick.isActive() && this.joystick.getStrength() > 0.01;\n    }\n\n    // ============ 任务1.3新增：交互系统 ============\n\n    /**\n     * 刷新可交互物体缓存（新增物体时调用）\n     */\n    public refreshInteractablesCache() {\n        this._allInteractables = this.node.scene.getComponentsInChildren(Interactable);\n        console.log(`[PlayerController] 缓存了 ${this._allInteractables.length} 个可交互物体`);\n    }\n\n    /**\n     * 刷新角色缓存（新增角色时调用）\n     */\n    public refreshCharactersCache() {\n        this._allCharacters = this.node.scene.getComponentsInChildren(CharacterState);\n        console.log(`[PlayerController] 缓存了 ${this._allCharacters.length} 个角色`);\n    }\n\n    /**\n     * 检测附近的可交互物体（使用缓存的列表）\n     */\n    private detectInteractables() {\n        let closestInteractable: Interactable | null = null;\n        let closestDistance = this.interactDistance;\n\n        // 获取玩家位置\n        this.node.getWorldPosition(this._rayOrigin);\n\n        // ✅ 优化：使用缓存的列表而非每帧遍历场景树\n        for (const interactable of this._allInteractables) {\n            if (!interactable.canInteract()) continue;\n\n            // 获取可交互物体位置\n            interactable.node.getWorldPosition(this._tempVec3_1);\n\n            // 计算距离\n            Vec3.subtract(this._tempVec3_2, this._tempVec3_1, this._rayOrigin);\n            const distance = this._tempVec3_2.length();\n\n            // 检查是否在交互范围内\n            const range = Math.min(this.interactDistance, interactable.getInteractRange());\n            if (distance <= range && distance < closestDistance) {\n                closestDistance = distance;\n                closestInteractable = interactable;\n            }\n        }\n\n        // 如果当前可交互物体发生变化，触发回调\n        if (closestInteractable !== this._currentInteractable) {\n            this._currentInteractable = closestInteractable;\n            this.notifyInteractionChange();\n        }\n    }\n\n    /**\n     * 触发交互（由UI按钮调用）\n     */\n    public triggerInteraction() {\n        if (this._currentInteractable && this._currentInteractable.canInteract()) {\n            this._currentInteractable.interact(this.node);\n            console.log(`[PlayerController] 与 ${this._currentInteractable.node.name} 交互`);\n        } else {\n            console.log('[PlayerController] 附近没有可交互的物体');\n        }\n    }\n\n    /**\n     * 获取当前可交互的物体\n     */\n    public getCurrentInteractable(): Interactable | null {\n        return this._currentInteractable;\n    }\n\n    /**\n     * 注册交互状态变化回调\n     * @param callback 回调函数\n     */\n    public onInteractionChange(callback: (interactable: Interactable | null) => void) {\n        this._interactionCallbacks.push(callback);\n    }\n\n    /**\n     * 通知交互状态变化\n     */\n    private notifyInteractionChange() {\n        for (const callback of this._interactionCallbacks) {\n            callback(this._currentInteractable);\n        }\n    }\n\n    /**\n     * 锁定玩家移动（用于交互动画期间）\n     * @param locked 是否锁定\n     */\n    public setMovementLocked(locked: boolean) {\n        this._isInteracting = locked;\n        if (locked) {\n            console.log('[PlayerController] 移动已锁定（交互中）');\n            // ✅ 任务3.1 Bug修复：锁定时强制切换到idle动画\n            if (this.animationController) {\n                this.animationController.playIdle();\n            }\n        } else {\n            console.log('[PlayerController] 移动已解锁');\n        }\n    }\n\n    /**\n     * 是否正在交互中\n     */\n    public isInteracting(): boolean {\n        return this._isInteracting;\n    }\n\n    // ============ 任务2.1新增：救援系统 ============\n\n    /**\n     * 检测附近可救援的队友（使用缓存的列表）\n     */\n    private detectRescueTargets() {\n        // 只有正常状态才能救援\n        if (!this._characterState || !this._characterState.isNormal()) {\n            return;\n        }\n\n        let nearestTarget: Node | null = null;\n        let nearestDistance = this.rescueDistance;\n\n        this.node.getWorldPosition(this._rayOrigin);\n\n        // ✅ 优化：使用缓存的列表而非每帧遍历场景树\n        for (const character of this._allCharacters) {\n            // 跳过自己\n            if (character.node === this.node) continue;\n\n            // 只检测被挂起且可以救援的队友\n            if (!character.canBeRescued()) continue;\n\n            character.node.getWorldPosition(this._tempVec3_1);\n            Vec3.subtract(this._tempVec3_2, this._tempVec3_1, this._rayOrigin);\n            const distance = this._tempVec3_2.length();\n\n            if (distance <= nearestDistance) {\n                nearestDistance = distance;\n                nearestTarget = character.node;\n            }\n        }\n\n        // 如果救援目标发生变化，触发回调\n        if (nearestTarget !== this._currentRescueTarget) {\n            this._currentRescueTarget = nearestTarget;\n            this.notifyRescueTargetChange();\n        }\n    }\n\n    /**\n     * 触发救援（由UI按钮调用）\n     */\n    public triggerRescue() {\n        if (!this._currentRescueTarget) {\n            console.log('[PlayerController] 附近没有可救援的队友');\n            return;\n        }\n\n        const targetState = this._currentRescueTarget.getComponent(CharacterState);\n        if (!targetState || !targetState.canBeRescued()) {\n            console.log('[PlayerController] 目标无法救援');\n            return;\n        }\n\n        // 开始救援\n        const success = targetState.startRescue(this.node);\n        if (success) {\n            // 锁定自己的移动\n            this.setMovementLocked(true);\n            console.log(`[PlayerController] 开始救援 ${this._currentRescueTarget.name}`);\n        }\n    }\n\n    /**\n     * 取消救援\n     */\n    public cancelRescue() {\n        if (!this._currentRescueTarget) return;\n\n        const targetState = this._currentRescueTarget.getComponent(CharacterState);\n        if (targetState) {\n            targetState.cancelRescue();\n        }\n\n        // 解锁移动\n        this.setMovementLocked(false);\n        console.log('[PlayerController] 取消救援');\n    }\n\n    /**\n     * 获取当前救援目标\n     */\n    public getCurrentRescueTarget(): Node | null {\n        return this._currentRescueTarget;\n    }\n\n    /**\n     * 注册救援目标变化回调\n     */\n    public onRescueTargetChange(callback: (target: Node | null) => void) {\n        this._rescueCallbacks.push(callback);\n    }\n\n    /**\n     * 通知救援目标变化\n     */\n    private notifyRescueTargetChange() {\n        for (const callback of this._rescueCallbacks) {\n            callback(this._currentRescueTarget);\n        }\n    }\n\n    /**\n     * 获取角色状态组件\n     */\n    public getCharacterState(): CharacterState | null {\n        return this._characterState;\n    }\n}\n"]}