{"version":3,"sources":["file:///Users/clare/Desktop/%E5%89%8D%E5%93%A8AI%E5%B0%8F%E8%AF%BE/ClareProject/Cute-Pet-Escape-Project/CocosProject/assets/scripts/Cage.ts"],"names":["_decorator","Component","CharacterState","ccclass","property","Cage","_hangedSurvivors","start","console","log","node","name","maxCapacity","hangSurvivor","survivorNode","length","warn","includes","push","characterState","getComponent","onStateChange","oldState","newState","removeSurvivor","index","indexOf","splice","getHangedCount","isFull","getHangedSurvivors"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAISA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;;AACZC,MAAAA,c,iBAAAA,c;;;;;4EALT;AACA;AACA;;;;;OAIM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;;sBAGjBK,I,WADZF,OAAO,CAAC,MAAD,C,2BAAR,MACaE,IADb,SAC0BJ,SAD1B,CACoC;AAAA;AAAA;;AAAA;;AAEA;AAFA,eAIxBK,gBAJwB,GAIG,EAJH;AAAA;;AAIO;AAEvCC,QAAAA,KAAK,GAAG;AACJC,UAAAA,OAAO,CAACC,GAAR,CAAa,aAAY,KAAKC,IAAL,CAAUC,IAAK,aAAY,KAAKC,WAAY,EAArE;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACWC,QAAAA,YAAY,CAACC,YAAD,EAA8B;AAC7C;AACA,cAAI,KAAKR,gBAAL,CAAsBS,MAAtB,IAAgC,KAAKH,WAAzC,EAAsD;AAClDJ,YAAAA,OAAO,CAACQ,IAAR,CAAc,UAAS,KAAKN,IAAL,CAAUC,IAAK,eAAtC;AACA,mBAAO,KAAP;AACH,WAL4C,CAO7C;;;AACA,cAAI,KAAKL,gBAAL,CAAsBW,QAAtB,CAA+BH,YAA/B,CAAJ,EAAkD;AAC9CN,YAAAA,OAAO,CAACQ,IAAR,CAAc,UAASF,YAAY,CAACH,IAAK,SAAQ,KAAKD,IAAL,CAAUC,IAAK,IAAhE;AACA,mBAAO,KAAP;AACH,WAX4C,CAa7C;;;AACA,eAAKL,gBAAL,CAAsBY,IAAtB,CAA2BJ,YAA3B;;AAEAN,UAAAA,OAAO,CAACC,GAAR,CAAa,UAASK,YAAY,CAACH,IAAK,QAAO,KAAKD,IAAL,CAAUC,IAAK,MAAK,KAAKL,gBAAL,CAAsBS,MAAO,IAAG,KAAKH,WAAY,GAApH,EAhB6C,CAkB7C;;AACA,gBAAMO,cAAc,GAAGL,YAAY,CAACM,YAAb;AAAA;AAAA,+CAAvB;;AACA,cAAID,cAAJ,EAAoB;AAChBA,YAAAA,cAAc,CAACE,aAAf,CAA6B,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACjD,kBAAIA,QAAQ,KAAK,QAAjB,EAA2B;AACvB,qBAAKC,cAAL,CAAoBV,YAApB;AACH;AACJ,aAJD;AAKH;;AAED,iBAAO,IAAP;AACH;AAED;AACJ;AACA;;;AACWU,QAAAA,cAAc,CAACV,YAAD,EAAqB;AACtC,gBAAMW,KAAK,GAAG,KAAKnB,gBAAL,CAAsBoB,OAAtB,CAA8BZ,YAA9B,CAAd;;AACA,cAAIW,KAAK,KAAK,CAAC,CAAf,EAAkB;;AAElB,eAAKnB,gBAAL,CAAsBqB,MAAtB,CAA6BF,KAA7B,EAAoC,CAApC;;AACAjB,UAAAA,OAAO,CAACC,GAAR,CAAa,UAASK,YAAY,CAACH,IAAK,OAAM,KAAKD,IAAL,CAAUC,IAAK,IAAG,KAAKL,gBAAL,CAAsBS,MAAO,IAAG,KAAKH,WAAY,GAAjH;AACH;AAED;AACJ;AACA;;;AACWgB,QAAAA,cAAc,GAAW;AAC5B,iBAAO,KAAKtB,gBAAL,CAAsBS,MAA7B;AACH;AAED;AACJ;AACA;;;AACWc,QAAAA,MAAM,GAAY;AACrB,iBAAO,KAAKvB,gBAAL,CAAsBS,MAAtB,IAAgC,KAAKH,WAA5C;AACH;AAED;AACJ;AACA;;;AACWkB,QAAAA,kBAAkB,GAAW;AAChC,iBAAO,CAAC,GAAG,KAAKxB,gBAAT,CAAP,CADgC,CACG;AACtC;;AA5E+B,O,8EAC/BF,Q;;;;;iBAC4B,C","sourcesContent":["// 文件名: Cage.ts\n// 功能：笼子组件（任务2.1）\n// 用于挂起逃生者的位置\n\nimport { _decorator, Component, Node } from 'cc';\nimport { CharacterState } from './CharacterState';\nconst { ccclass, property } = _decorator;\n\n@ccclass('Cage')\nexport class Cage extends Component {\n    @property\n    public maxCapacity: number = 1; // 最大容量（可以挂起几个逃生者）\n\n    private _hangedSurvivors: Node[] = []; // 当前挂起的逃生者列表\n\n    start() {\n        console.log(`[Cage] 笼子 ${this.node.name} 初始化，最大容量：${this.maxCapacity}`);\n    }\n\n    /**\n     * 挂起一个逃生者\n     * @param survivorNode 逃生者节点\n     * @returns 是否成功挂起\n     */\n    public hangSurvivor(survivorNode: Node): boolean {\n        // 检查容量\n        if (this._hangedSurvivors.length >= this.maxCapacity) {\n            console.warn(`[Cage] ${this.node.name} 已满，无法挂起更多逃生者`);\n            return false;\n        }\n\n        // 检查是否已经挂在这个笼子上\n        if (this._hangedSurvivors.includes(survivorNode)) {\n            console.warn(`[Cage] ${survivorNode.name} 已经挂在 ${this.node.name} 上`);\n            return false;\n        }\n\n        // 添加到列表\n        this._hangedSurvivors.push(survivorNode);\n\n        console.log(`[Cage] ${survivorNode.name} 被挂在 ${this.node.name} 上（${this._hangedSurvivors.length}/${this.maxCapacity}）`);\n\n        // 监听状态变化，如果被救或淘汰，从列表移除\n        const characterState = survivorNode.getComponent(CharacterState);\n        if (characterState) {\n            characterState.onStateChange((oldState, newState) => {\n                if (newState !== 'hanged') {\n                    this.removeSurvivor(survivorNode);\n                }\n            });\n        }\n\n        return true;\n    }\n\n    /**\n     * 从笼子移除逃生者（救援成功或淘汰）\n     */\n    public removeSurvivor(survivorNode: Node) {\n        const index = this._hangedSurvivors.indexOf(survivorNode);\n        if (index === -1) return;\n\n        this._hangedSurvivors.splice(index, 1);\n        console.log(`[Cage] ${survivorNode.name} 离开 ${this.node.name}（${this._hangedSurvivors.length}/${this.maxCapacity}）`);\n    }\n\n    /**\n     * 获取当前挂起的逃生者数量\n     */\n    public getHangedCount(): number {\n        return this._hangedSurvivors.length;\n    }\n\n    /**\n     * 是否已满\n     */\n    public isFull(): boolean {\n        return this._hangedSurvivors.length >= this.maxCapacity;\n    }\n\n    /**\n     * 获取所有挂起的逃生者\n     */\n    public getHangedSurvivors(): Node[] {\n        return [...this._hangedSurvivors]; // 返回副本\n    }\n}\n"]}