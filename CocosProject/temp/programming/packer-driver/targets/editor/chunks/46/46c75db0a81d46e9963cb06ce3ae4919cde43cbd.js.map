{"version":3,"sources":["file:///Users/clare/Desktop/%E5%89%8D%E5%93%A8AI%E5%B0%8F%E8%AF%BE/ClareProject/Cute-Pet-Escape-Project/CocosProject/assets/scripts/network/PlayerSyncController.ts"],"names":["_decorator","Component","Vec3","NetworkManager","ccclass","property","PlayerSyncController","_networkManager","_syncTimer","_lastPosition","_lastRotationY","_lastIsMoving","_lastAnimationState","_tempPosition","start","console","log","getInstance","error","isConnected","warn","node","getPosition","eulerAngles","y","update","deltaTime","syncInterval","syncPlayerState","currentRotationY","positionChanged","distance","positionThreshold","rotationChanged","Math","abs","rotationThreshold","animationState","isMoving","playerController","getComponent","stateChanged","sendPlayerMove","x","z","set","enableDebugLog","toFixed","forceSyncState","setSyncInterval","interval","max","setEnabled","enabled"],"mappings":"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","sourcesContent":["// 文件名: PlayerSyncController.ts\n// 功能: 本地玩家同步控制器 - 将本地玩家数据同步到服务器（任务4.1）\n\nimport { _decorator, Component, Node, Vec3 } from 'cc';\nimport { NetworkManager } from './NetworkManager';\nconst { ccclass, property } = _decorator;\n\n@ccclass('PlayerSyncController')\nexport class PlayerSyncController extends Component {\n    // ============ 配置 ============\n    @property\n    public syncInterval: number = 0.05; // 同步间隔（秒），默认50ms = 20次/秒\n\n    @property\n    public positionThreshold: number = 0.01; // 位置变化阈值（米）\n\n    @property\n    public rotationThreshold: number = 1.0; // 旋转变化阈值（度）\n\n    @property\n    public enableDebugLog: boolean = false; // 是否启用调试日志\n\n    // 私有成员\n    private _networkManager: NetworkManager | null = null;\n    private _syncTimer: number = 0;\n\n    // 上一次发送的状态（用于变化检测）\n    private _lastPosition: Vec3 = new Vec3();\n    private _lastRotationY: number = 0;\n    private _lastIsMoving: boolean = false;\n    private _lastAnimationState: string = \"idle\";\n\n    // 临时变量（性能优化）\n    private _tempPosition: Vec3 = new Vec3();\n\n    start() {\n        console.log('[PlayerSyncController] 玩家同步控制器初始化');\n\n        // 获取NetworkManager\n        this._networkManager = NetworkManager.getInstance();\n        if (!this._networkManager) {\n            console.error('[PlayerSyncController] NetworkManager未找到！');\n            return;\n        }\n\n        // 检查是否已连接到房间\n        if (!this._networkManager.isConnected()) {\n            console.warn('[PlayerSyncController] 未连接到房间，同步将在连接后开始');\n        }\n\n        // 初始化上一次状态\n        this.node.getPosition(this._lastPosition);\n        this._lastRotationY = this.node.eulerAngles.y;\n    }\n\n    update(deltaTime: number) {\n        // 检查网络连接\n        if (!this._networkManager || !this._networkManager.isConnected()) {\n            return;\n        }\n\n        // 累积时间\n        this._syncTimer += deltaTime;\n\n        // 达到同步间隔时发送数据\n        if (this._syncTimer >= this.syncInterval) {\n            this.syncPlayerState();\n            this._syncTimer = 0;\n        }\n    }\n\n    /**\n     * 同步玩家状态到服务器\n     */\n    private syncPlayerState() {\n        // 获取当前状态\n        this.node.getPosition(this._tempPosition);\n        const currentRotationY = this.node.eulerAngles.y;\n\n        // 检测是否正在移动（通过位置变化判断）\n        const positionChanged = Vec3.distance(this._tempPosition, this._lastPosition) > this.positionThreshold;\n        const rotationChanged = Math.abs(currentRotationY - this._lastRotationY) > this.rotationThreshold;\n\n        // 获取动画状态（如果有CharacterAnimationController）\n        let animationState = \"idle\";\n        let isMoving = false;\n\n        // 尝试从PlayerController或其他移动控制器获取移动状态\n        const playerController = this.node.getComponent('PlayerController');\n        if (playerController && typeof playerController.isMoving === 'function') {\n            isMoving = playerController.isMoving();\n            animationState = isMoving ? \"run\" : \"idle\";\n        } else {\n            // 如果没有PlayerController，通过位置变化判断\n            isMoving = positionChanged;\n            animationState = isMoving ? \"run\" : \"idle\";\n        }\n\n        // 检查状态是否变化\n        const stateChanged = positionChanged ||\n                            rotationChanged ||\n                            isMoving !== this._lastIsMoving ||\n                            animationState !== this._lastAnimationState;\n\n        // 只在状态变化时发送（节省带宽）\n        if (stateChanged) {\n            this._networkManager!.sendPlayerMove(\n                this._tempPosition.x,\n                this._tempPosition.y,\n                this._tempPosition.z,\n                currentRotationY,\n                isMoving,\n                animationState\n            );\n\n            // 更新上一次状态\n            this._lastPosition.set(this._tempPosition);\n            this._lastRotationY = currentRotationY;\n            this._lastIsMoving = isMoving;\n            this._lastAnimationState = animationState;\n\n            if (this.enableDebugLog) {\n                console.log(`[PlayerSyncController] 同步状态: pos(${this._tempPosition.x.toFixed(2)}, ${this._tempPosition.z.toFixed(2)}), rot(${currentRotationY.toFixed(1)}), moving(${isMoving})`);\n            }\n        }\n    }\n\n    /**\n     * 强制发送当前状态（供外部调用）\n     */\n    public forceSyncState() {\n        if (!this._networkManager || !this._networkManager.isConnected()) {\n            return;\n        }\n\n        this.node.getPosition(this._tempPosition);\n        const currentRotationY = this.node.eulerAngles.y;\n\n        // 获取移动状态\n        let isMoving = false;\n        let animationState = \"idle\";\n\n        const playerController = this.node.getComponent('PlayerController');\n        if (playerController && typeof playerController.isMoving === 'function') {\n            isMoving = playerController.isMoving();\n            animationState = isMoving ? \"run\" : \"idle\";\n        }\n\n        this._networkManager.sendPlayerMove(\n            this._tempPosition.x,\n            this._tempPosition.y,\n            this._tempPosition.z,\n            currentRotationY,\n            isMoving,\n            animationState\n        );\n\n        console.log('[PlayerSyncController] 强制同步状态');\n    }\n\n    /**\n     * 设置同步间隔\n     */\n    public setSyncInterval(interval: number) {\n        this.syncInterval = Math.max(0.01, interval); // 最小10ms\n        console.log(`[PlayerSyncController] 同步间隔设置为 ${this.syncInterval}s`);\n    }\n\n    /**\n     * 启用/禁用同步\n     */\n    public setEnabled(enabled: boolean) {\n        this.enabled = enabled;\n        console.log(`[PlayerSyncController] 同步${enabled ? '启用' : '禁用'}`);\n    }\n}\n"]}