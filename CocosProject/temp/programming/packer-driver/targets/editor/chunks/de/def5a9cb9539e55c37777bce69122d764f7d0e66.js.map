{"version":3,"sources":["file:///Users/clare/Desktop/%E5%89%8D%E5%93%A8AI%E5%B0%8F%E8%AF%BE/ClareProject/Cute-Pet-Escape-Project/CocosProject/assets/scripts/HunterController.ts"],"names":["_decorator","Component","Node","Vec2","Vec3","Quat","Joystick","CharacterState","Hunter","Board","CharacterAnimationController","ccclass","property","HunterController","_moveDirection","_targetRotation","_canAttack","_attackCooldownTimer","_nearestSurvivor","_attackCallbacks","_nearestBoard","_boardCallbacks","_hunter","_allCharacters","_allBoards","_tempVec2","_tempVec3_1","_tempVec3_2","_tempVec3_3","_tempQuat","_cameraForward","_cameraRight","start","joystick","console","error","cameraNode","node","getComponent","autoCatchEnabled","refreshCache","animationController","getComponentInChildren","warn","log","update","deltaTime","isCarrying","getDirectionOut","joyStrength","getStrength","calculateMoveDirection","multiplyScalar","moveSpeed","getPosition","add","setPosition","rotateTowardsMovement","set","detectSurvivors","detectBoards","updateAnimation","isMoving","updateMovementAnimation","joyDir","getWorldRotation","transformQuat","y","normalize","x","lengthSqr","targetY","Math","atan2","z","PI","fromEuler","getRotation","slerp","rotationSpeed","setRotation","scene","getComponentsInChildren","length","nearestSurvivor","nearestDistance","attackRange","getWorldPosition","character","isNormal","subtract","distance","notifyAttackTargetChange","triggerAttack","playAttack","name","catchSurvivor","attackCooldown","getAttackTarget","canAttack","getAttackCooldownProgress","onAttackTargetChange","callback","push","nearestBoard","boardBreakRange","board","getState","notifyBoardTargetChange","triggerBreakBoard","breakBoard","active","getBoardTarget","canBreakBoard","onBoardTargetChange","isActive","getHunter"],"mappings":"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","sourcesContent":["// 文件名: HunterController.ts\n// 功能：追捕者可控移动 + 攻击 + 踩碎木板（任务2.2）\n// 版本：V1.1 - 新增动画控制（任务3.1）\n\nimport { _decorator, Component, Node, Vec2, Vec3, Quat, PhysicsSystem } from 'cc';\nimport { Joystick } from './Joystick';\nimport { CharacterState, CharacterStateType } from './CharacterState';\nimport { Hunter } from './Hunter';\nimport { Board } from './Board';\nimport { CharacterAnimationController } from './CharacterAnimationController';\nconst { ccclass, property } = _decorator;\n\n@ccclass('HunterController')\nexport class HunterController extends Component {\n    @property(Joystick)\n    public joystick: Joystick = null!; // 虚拟摇杆引用\n\n    @property(Node)\n    public cameraNode: Node = null!; // 摄像机节点引用\n\n    @property\n    public moveSpeed: number = 5.75; // 移动速度（115% = 5 * 1.15）\n\n    @property\n    public rotationSpeed: number = 10.0; // 转身速度\n\n    @property\n    public attackRange: number = 2.0; // 攻击范围（米）\n\n    @property\n    public attackCooldown: number = 1.0; // 攻击冷却时间（秒）\n\n    @property\n    public boardBreakRange: number = 2.5; // 踩碎木板范围（米）\n\n    @property(CharacterAnimationController)\n    public animationController: CharacterAnimationController | null = null; // 动画控制器（任务3.1新增）\n\n    private _moveDirection: Vec3 = new Vec3(); // 世界空间移动方向\n    private _targetRotation: Quat = new Quat(); // 目标旋转\n\n    // 攻击系统\n    private _canAttack: boolean = true; // 是否可以攻击\n    private _attackCooldownTimer: number = 0; // 攻击冷却计时器\n    private _nearestSurvivor: Node | null = null; // 最近的逃生者\n    private _attackCallbacks: ((target: Node | null) => void)[] = []; // 攻击目标变化回调\n\n    // 木板系统\n    private _nearestBoard: Board | null = null; // 最近的倒下木板\n    private _boardCallbacks: ((board: Board | null) => void)[] = []; // 木板目标变化回调\n\n    // Hunter组件引用\n    private _hunter: Hunter | null = null;\n\n    // 性能优化：缓存场景中的角色和木板\n    private _allCharacters: CharacterState[] = [];\n    private _allBoards: Board[] = [];\n\n    // 性能优化：复用临时变量\n    private _tempVec2: Vec2 = new Vec2();\n    private _tempVec3_1: Vec3 = new Vec3();\n    private _tempVec3_2: Vec3 = new Vec3();\n    private _tempVec3_3: Vec3 = new Vec3();\n    private _tempQuat: Quat = new Quat();\n    private _cameraForward: Vec3 = new Vec3();\n    private _cameraRight: Vec3 = new Vec3();\n\n    start() {\n        // 检查必需的引用\n        if (!this.joystick) {\n            console.error('[HunterController] joystick未绑定！');\n        }\n        if (!this.cameraNode) {\n            console.error('[HunterController] cameraNode未绑定！');\n        }\n\n        // 获取Hunter组件\n        this._hunter = this.node.getComponent(Hunter);\n        if (!this._hunter) {\n            console.error('[HunterController] Hunter组件未找到！');\n        } else {\n            // 禁用Hunter的自动抓捕，改用手动攻击\n            this._hunter.autoCatchEnabled = false;\n        }\n\n        // 缓存场景中的角色和木板\n        this.refreshCache();\n\n        // ✅ 任务3.1新增：获取动画控制器\n        if (!this.animationController) {\n            this.animationController = this.node.getComponentInChildren(CharacterAnimationController);\n            if (!this.animationController) {\n                console.warn('[HunterController] CharacterAnimationController未找到，动画功能将不可用');\n            }\n        }\n\n        console.log('[HunterController] 追捕者控制器初始化完成');\n    }\n\n    update(deltaTime: number) {\n        if (!this.joystick || !this.cameraNode) return;\n\n        // 更新攻击冷却\n        if (!this._canAttack) {\n            this._attackCooldownTimer -= deltaTime;\n            if (this._attackCooldownTimer <= 0) {\n                this._canAttack = true;\n            }\n        }\n\n        // 如果正在携带逃生者，禁止移动（由Hunter组件处理）\n        if (this._hunter && this._hunter.isCarrying()) {\n            return;\n        }\n\n        // 获取摇杆输入\n        this.joystick.getDirectionOut(this._tempVec2);\n        const joyStrength = this.joystick.getStrength();\n\n        if (joyStrength > 0.01) {\n            // 计算相对于摄像机的移动方向\n            this.calculateMoveDirection(this._tempVec2);\n\n            // 移动角色\n            Vec3.multiplyScalar(this._tempVec3_1, this._moveDirection, this.moveSpeed * joyStrength * deltaTime);\n            this.node.getPosition(this._tempVec3_2);\n            Vec3.add(this._tempVec3_2, this._tempVec3_2, this._tempVec3_1);\n            this.node.setPosition(this._tempVec3_2);\n\n            // 旋转角色面向移动方向\n            this.rotateTowardsMovement(deltaTime);\n        } else {\n            // 摇杆松开时重置移动方向\n            this._moveDirection.set(0, 0, 0);\n        }\n\n        // 检测附近的逃生者（用于攻击）\n        this.detectSurvivors();\n\n        // 检测附近的倒下木板（用于踩碎）\n        this.detectBoards();\n\n        // ✅ 任务3.1新增：更新动画状态\n        this.updateAnimation();\n    }\n\n    /**\n     * 更新动画状态（任务3.1新增）\n     */\n    private updateAnimation() {\n        if (!this.animationController) return;\n\n        // 根据移动状态自动切换动画\n        const isMoving = this.isMoving();\n        this.animationController.updateMovementAnimation(isMoving);\n    }\n\n    /**\n     * 计算相对于摄像机的移动方向\n     * @param joyDir 摇杆输入方向（2D）\n     */\n    private calculateMoveDirection(joyDir: Vec3 | { x: number; y: number }) {\n        // 获取摄像机的世界旋转\n        this.cameraNode.getWorldRotation(this._tempQuat);\n\n        // 使用Vec3.transformQuat转换标准向量\n        this._tempVec3_3.set(0, 0, -1); // 标准Forward向量\n        Vec3.transformQuat(this._cameraForward, this._tempVec3_3, this._tempQuat);\n\n        this._tempVec3_3.set(1, 0, 0); // 标准Right向量\n        Vec3.transformQuat(this._cameraRight, this._tempVec3_3, this._tempQuat);\n\n        // 将前方和右方向投影到水平面（Y=0）\n        this._cameraForward.y = 0;\n        this._cameraForward.normalize();\n\n        this._cameraRight.y = 0;\n        this._cameraRight.normalize();\n\n        // 组合摇杆输入和摄像机方向\n        Vec3.multiplyScalar(this._tempVec3_1, this._cameraForward, joyDir.y);\n        Vec3.multiplyScalar(this._tempVec3_2, this._cameraRight, joyDir.x);\n        Vec3.add(this._moveDirection, this._tempVec3_1, this._tempVec3_2);\n        this._moveDirection.normalize();\n    }\n\n    /**\n     * 平滑旋转角色面向移动方向\n     */\n    private rotateTowardsMovement(deltaTime: number) {\n        if (this._moveDirection.lengthSqr() < 0.01) return;\n\n        // 计算目标旋转（朝向移动方向）\n        const targetY = Math.atan2(this._moveDirection.x, this._moveDirection.z) * (180 / Math.PI);\n        Quat.fromEuler(this._targetRotation, 0, targetY, 0);\n\n        // 平滑插值到目标旋转\n        this.node.getRotation(this._tempQuat);\n        Quat.slerp(this._tempQuat, this._tempQuat, this._targetRotation, this.rotationSpeed * deltaTime);\n        this.node.setRotation(this._tempQuat);\n    }\n\n    /**\n     * 刷新缓存（新增角色或木板时调用）\n     */\n    public refreshCache() {\n        this._allCharacters = this.node.scene.getComponentsInChildren(CharacterState);\n        this._allBoards = this.node.scene.getComponentsInChildren(Board);\n        console.log(`[HunterController] 缓存了 ${this._allCharacters.length} 个角色, ${this._allBoards.length} 个木板`);\n    }\n\n    // ============ 攻击系统 ============\n\n    /**\n     * 检测附近的逃生者\n     */\n    private detectSurvivors() {\n        let nearestSurvivor: Node | null = null;\n        let nearestDistance = this.attackRange;\n\n        this.node.getWorldPosition(this._tempVec3_1);\n\n        for (const character of this._allCharacters) {\n            // 只检测正常状态的逃生者\n            if (!character.isNormal()) continue;\n\n            character.node.getWorldPosition(this._tempVec3_2);\n            Vec3.subtract(this._tempVec3_2, this._tempVec3_2, this._tempVec3_1);\n            const distance = this._tempVec3_2.length();\n\n            if (distance <= nearestDistance) {\n                nearestDistance = distance;\n                nearestSurvivor = character.node;\n            }\n        }\n\n        // 如果目标发生变化，触发回调\n        if (nearestSurvivor !== this._nearestSurvivor) {\n            this._nearestSurvivor = nearestSurvivor;\n            this.notifyAttackTargetChange();\n        }\n    }\n\n    /**\n     * 触发攻击（由UI按钮调用）\n     */\n    public triggerAttack() {\n        if (!this._canAttack) {\n            console.log('[HunterController] 攻击冷却中...');\n            return;\n        }\n\n        if (!this._nearestSurvivor) {\n            console.log('[HunterController] 附近没有可攻击的逃生者');\n            return;\n        }\n\n        if (!this._hunter) {\n            console.error('[HunterController] Hunter组件未找到');\n            return;\n        }\n\n        // ✅ 任务3.1新增：播放攻击动画\n        if (this.animationController) {\n            this.animationController.playAttack();\n        }\n\n        // 执行攻击：调用Hunter的抓捕逻辑\n        console.log(`[HunterController] 攻击 ${this._nearestSurvivor.name}`);\n        this._hunter.catchSurvivor(this._nearestSurvivor);\n\n        // 进入冷却\n        this._canAttack = false;\n        this._attackCooldownTimer = this.attackCooldown;\n    }\n\n    /**\n     * 获取当前攻击目标\n     */\n    public getAttackTarget(): Node | null {\n        return this._nearestSurvivor;\n    }\n\n    /**\n     * 是否可以攻击\n     */\n    public canAttack(): boolean {\n        return this._canAttack && this._nearestSurvivor !== null;\n    }\n\n    /**\n     * 获取攻击冷却进度（0-1）\n     */\n    public getAttackCooldownProgress(): number {\n        if (this._canAttack) return 1.0;\n        return 1.0 - (this._attackCooldownTimer / this.attackCooldown);\n    }\n\n    /**\n     * 注册攻击目标变化回调\n     */\n    public onAttackTargetChange(callback: (target: Node | null) => void) {\n        this._attackCallbacks.push(callback);\n    }\n\n    /**\n     * 通知攻击目标变化\n     */\n    private notifyAttackTargetChange() {\n        for (const callback of this._attackCallbacks) {\n            callback(this._nearestSurvivor);\n        }\n    }\n\n    // ============ 踩碎木板系统 ============\n\n    /**\n     * 检测附近的倒下木板\n     */\n    private detectBoards() {\n        let nearestBoard: Board | null = null;\n        let nearestDistance = this.boardBreakRange;\n\n        this.node.getWorldPosition(this._tempVec3_1);\n\n        for (const board of this._allBoards) {\n            // 只检测已倒下的木板\n            if (board.getState() !== 'down') continue;\n\n            board.node.getWorldPosition(this._tempVec3_2);\n            Vec3.subtract(this._tempVec3_2, this._tempVec3_2, this._tempVec3_1);\n            const distance = this._tempVec3_2.length();\n\n            if (distance <= nearestDistance) {\n                nearestDistance = distance;\n                nearestBoard = board;\n            }\n        }\n\n        // 如果目标发生变化，触发回调\n        if (nearestBoard !== this._nearestBoard) {\n            this._nearestBoard = nearestBoard;\n            this.notifyBoardTargetChange();\n        }\n    }\n\n    /**\n     * 触发踩碎木板（由UI按钮调用）\n     */\n    public triggerBreakBoard() {\n        if (!this._nearestBoard) {\n            console.log('[HunterController] 附近没有可踩碎的木板');\n            return;\n        }\n\n        console.log(`[HunterController] 踩碎木板 ${this._nearestBoard.node.name}`);\n        this._nearestBoard.breakBoard();\n\n        // 木板消失\n        this._nearestBoard.node.active = false;\n\n        // 清空引用\n        this._nearestBoard = null;\n        this.notifyBoardTargetChange();\n    }\n\n    /**\n     * 获取当前木板目标\n     */\n    public getBoardTarget(): Board | null {\n        return this._nearestBoard;\n    }\n\n    /**\n     * 是否可以踩碎木板\n     */\n    public canBreakBoard(): boolean {\n        return this._nearestBoard !== null;\n    }\n\n    /**\n     * 注册木板目标变化回调\n     */\n    public onBoardTargetChange(callback: (board: Board | null) => void) {\n        this._boardCallbacks.push(callback);\n    }\n\n    /**\n     * 通知木板目标变化\n     */\n    private notifyBoardTargetChange() {\n        for (const callback of this._boardCallbacks) {\n            callback(this._nearestBoard);\n        }\n    }\n\n    // ============ 工具方法 ============\n\n    /**\n     * 是否正在移动\n     */\n    public isMoving(): boolean {\n        return this.joystick && this.joystick.isActive() && this.joystick.getStrength() > 0.01;\n    }\n\n    /**\n     * 获取Hunter组件\n     */\n    public getHunter(): Hunter | null {\n        return this._hunter;\n    }\n}\n"]}