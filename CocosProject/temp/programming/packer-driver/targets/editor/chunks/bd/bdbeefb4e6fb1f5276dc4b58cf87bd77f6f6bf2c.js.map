{"version":3,"sources":["file:///Users/clare/Desktop/%E5%89%8D%E5%93%A8AI%E5%B0%8F%E8%AF%BE/ClareProject/Cute-Pet-Escape-Project/CocosProject/assets/scripts/HangTimerUI.ts"],"names":["_decorator","Component","Node","Label","Sprite","CharacterState","ccclass","property","HangTimerUI","_characterState","start","targetCharacter","console","error","getComponent","showOnlyWhenHanged","node","active","log","update","deltaTime","isHanged","updateTimerDisplay","updateLivesDisplay","updatePosition","timerLabel","timeRemaining","getHangTimeRemaining","seconds","Math","ceil","string","timerBar","progress","hangDuration","color","constructor","livesLabel","currentLives","getRemainingLives","maxLives","maxHangCount","charWorldPos","getWorldPosition","setWorldPosition","x","y","followOffset","z","setTargetCharacter","character","setVisible","visible"],"mappings":"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","sourcesContent":["// 文件名: HangTimerUI.ts\n// 功能：被挂队友头顶倒计时UI显示（Checklist修复）\n// 显示30秒挂起倒计时和生命值\n\nimport { _decorator, Component, Node, Label, Sprite } from 'cc';\nimport { CharacterState, CharacterStateType } from './CharacterState';\nconst { ccclass, property } = _decorator;\n\n@ccclass('HangTimerUI')\nexport class HangTimerUI extends Component {\n    @property(Label)\n    public timerLabel: Label = null!; // 倒计时文字（如\"23s\"）\n\n    @property(Sprite)\n    public timerBar: Sprite | null = null; // 倒计时进度条（可选）\n\n    @property(Label)\n    public livesLabel: Label | null = null; // 生命值文字（如\"1/2\"）\n\n    @property(Node)\n    public targetCharacter: Node = null!; // 目标角色节点\n\n    @property\n    public showOnlyWhenHanged: boolean = true; // 仅在被挂起时显示\n\n    @property\n    public followOffset: number = 2.5; // 跟随偏移高度（头顶上方）\n\n    private _characterState: CharacterState | null = null;\n\n    start() {\n        if (!this.targetCharacter) {\n            console.error('[HangTimerUI] targetCharacter未绑定！');\n            return;\n        }\n\n        // 获取角色状态组件\n        this._characterState = this.targetCharacter.getComponent(CharacterState);\n        if (!this._characterState) {\n            console.error('[HangTimerUI] 目标角色没有CharacterState组件！');\n            return;\n        }\n\n        // 初始隐藏\n        if (this.showOnlyWhenHanged) {\n            this.node.active = false;\n        }\n\n        console.log('[HangTimerUI] 挂起倒计时UI初始化完成');\n    }\n\n    update(deltaTime: number) {\n        if (!this._characterState) return;\n\n        // 检查是否被挂起\n        const isHanged = this._characterState.isHanged();\n\n        // 控制显示/隐藏\n        if (this.showOnlyWhenHanged) {\n            if (isHanged && !this.node.active) {\n                this.node.active = true;\n            } else if (!isHanged && this.node.active) {\n                this.node.active = false;\n            }\n        }\n\n        // 仅在被挂起时更新\n        if (isHanged) {\n            this.updateTimerDisplay();\n            this.updateLivesDisplay();\n            this.updatePosition();\n        }\n    }\n\n    /**\n     * 更新倒计时显示\n     */\n    private updateTimerDisplay() {\n        if (!this._characterState || !this.timerLabel) return;\n\n        const timeRemaining = this._characterState.getHangTimeRemaining();\n        const seconds = Math.ceil(timeRemaining);\n\n        // 更新文字\n        this.timerLabel.string = `${seconds}s`;\n\n        // 更新进度条（可选）\n        if (this.timerBar) {\n            const progress = timeRemaining / this._characterState.hangDuration;\n            // 通过fillRange控制进度条\n            // 注意：需要Sprite设置为FILLED类型\n            // this.timerBar.fillRange = progress;\n        }\n\n        // 时间紧急时变红色\n        if (timeRemaining <= 10) {\n            this.timerLabel.color = new (this.timerLabel.color.constructor as any)(255, 0, 0, 255);\n        } else {\n            this.timerLabel.color = new (this.timerLabel.color.constructor as any)(255, 255, 255, 255);\n        }\n    }\n\n    /**\n     * 更新生命值显示\n     */\n    private updateLivesDisplay() {\n        if (!this._characterState || !this.livesLabel) return;\n\n        const currentLives = this._characterState.getRemainingLives();\n        const maxLives = this._characterState.maxHangCount;\n\n        this.livesLabel.string = `生命: ${currentLives}/${maxLives}`;\n\n        // 生命值为0时变红色\n        if (currentLives <= 0) {\n            this.livesLabel.color = new (this.livesLabel.color.constructor as any)(255, 0, 0, 255);\n        }\n    }\n\n    /**\n     * 更新位置（跟随角色头顶）\n     */\n    private updatePosition() {\n        if (!this.targetCharacter) return;\n\n        // 获取角色世界位置\n        const charWorldPos = this.targetCharacter.getWorldPosition();\n\n        // 设置UI位置在角色上方\n        this.node.setWorldPosition(\n            charWorldPos.x,\n            charWorldPos.y + this.followOffset,\n            charWorldPos.z\n        );\n\n        // 让UI始终面向摄像机（Billboard效果）\n        // 注意：需要摄像机引用才能实现，这里简化处理\n        // 如果需要Billboard效果，可以在update中设置rotation\n    }\n\n    /**\n     * 手动设置目标角色（动态绑定）\n     */\n    public setTargetCharacter(character: Node) {\n        this.targetCharacter = character;\n        this._characterState = character.getComponent(CharacterState);\n\n        if (!this._characterState) {\n            console.error('[HangTimerUI] 设置的角色没有CharacterState组件！');\n        }\n    }\n\n    /**\n     * 强制显示/隐藏\n     */\n    public setVisible(visible: boolean) {\n        this.node.active = visible;\n    }\n}\n"]}